
/* $Id:$ 
 * Creation : February 9, 2010
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            barais
 */
@mainClass "edap::Main"
@mainOperation "main"


package edap;


require kermeta
require "http://SmartAdapters4MODERATES"


using kermeta::standard
using kermeta::persistence

class Context{
	reference res : kermeta::utils::StringBuffer
	reference cache : kermeta::utils::Hashtable<Object,String>
		
	reference lastgenerateName : String
	reference i : Integer
	
	operation getGenerateName(obj:Object):String is do
		var res : String
	
		res := cache.getValue(obj)
		if res == void then
			var metaClass : kermeta::language::structure::Class init obj.getMetaClass
			var prop : kermeta::language::structure::Property init metaClass.classDefinition.allAttribute.select{p | p.name == "aspectID"}.one
			
			if prop != void then
				res := obj.get(prop).asType(String)
			end
			
			if res == void then
				if (i.isVoid) then i:= 0 end
				res :="s"+ i.toString()
				i:=i+1	
			end	
			lastgenerateName := res
		end
		result := res
	end
	
	operation convert(val : String) : String is 
	do 
		result := " == "+"\""+val+"\""
		if val.contains("*") then
			result := " matches "+"\""+val.replace("*",".*")+"\""
		end
	end
}

aspect class AspectModelElement {
	operation pointcut2droolsPass1(ctx:Context):Void is 
		abstract 
		
	operation pointcut2droolsPass2(ctx:Context):Void is 
		abstract

	operation  pass1create(ctx:Context):Void is
		abstract
		
	operation  pass2set(ctx:Context):Void is
		abstract	
	
	operation generateGlobalStrategy(ctx:Context) is
		abstract
		
	operation generatePerElementStrategy(ctx:Context, ids:Set<String>) is
		abstract
		
	operation generatePerRoleStrategy(ctx:Context, ids:Set<String>) is
		abstract
	
	operation generateDeclare(ctx:Context):Void is
		abstract
		
	operation generatePerJoinPointStrategy(ctx:Context):Void is
		abstract					
}
aspect class EdapModel {
method  pass2set(ctx:Context):Void is do 
 	
	self.types.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Types"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



	self.imports.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Imports"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



if self.types.size >0 then

	self.types.each{c|c.pass2set(ctx)}
end
end
	method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.EdapModel(")
		ctx.res.append(")\n")

if self.types.size >0 then

	self.types.each{c|c.pointcut2droolsPass1(ctx)}
end
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.EdapModel(")
		ctx.res.append("this == "+varName+"Decl")
			if (self.types.size > 0) then
		self.types.each{o |
			ctx.res.append(", ")
			ctx.res.append("types".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (self.imports.size > 0) then
		self.imports.each{o |
			ctx.res.append(", ")
			ctx.res.append("imports".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
ctx.res.append(")\n")

if self.types.size >0 then

	self.types.each{c|c.pointcut2droolsPass2(ctx)}
end
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.EdapModel" +" "+ na +  " = null;
")	
if self.types.size >0 then

	self.types.each{c|c.generateDeclare(ctx)}
end
end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.EdapModel) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createEdapModel();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.EdapModel) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createEdapModel();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.EdapModel) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createEdapModel();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createEdapModel();
")

if self.types.size >0 then

	self.types.each{c|c.generatePerJoinPointStrategy(ctx)}
end
end

}aspect class Message {
method  pass2set(ctx:Context):Void is do 
 		if (not self.allowMulticast.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"AllowMulticast"+"("+self.allowMulticast.toString+");
")	
	end
	if (not self.name.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Name"+"(\""+self.name.toString+"\");
")	
	end

	self.parameters.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Parameters"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



	self.annotations.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Annotations"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



if self.parameters.size >0 then

	self.parameters.each{c|c.pass2set(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pass2set(ctx)}
end
end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.Message(")
			if (not self.allowMulticast.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("allowMulticast".replace("~","")+" == "+self.allowMulticast.toString)
		i := i+1	
	end
	if (not self.name.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("name".replace("~","")+ctx.convert(self.name.toString))
		i := i+1	
	end
ctx.res.append(")\n")

if self.parameters.size >0 then

	self.parameters.each{c|c.pointcut2droolsPass1(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass1(ctx)}
end
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.Message(")
		ctx.res.append("this == "+varName+"Decl")
			if (self.parameters.size > 0) then
		self.parameters.each{o |
			ctx.res.append(", ")
			ctx.res.append("parameters".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (self.annotations.size > 0) then
		self.annotations.each{o |
			ctx.res.append(", ")
			ctx.res.append("annotations".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
ctx.res.append(")\n")

if self.parameters.size >0 then

	self.parameters.each{c|c.pointcut2droolsPass2(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass2(ctx)}
end
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.Message" +" "+ na +  " = null;
")	
if self.parameters.size >0 then

	self.parameters.each{c|c.generateDeclare(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.generateDeclare(ctx)}
end
end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.Message) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createMessage();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.Message) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createMessage();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.Message) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createMessage();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createMessage();
")

if self.parameters.size >0 then

	self.parameters.each{c|c.generatePerJoinPointStrategy(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.generatePerJoinPointStrategy(ctx)}
end
end

}aspect class Component {
method  pass2set(ctx:Context):Void is do 
 	end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.Component(")
		ctx.res.append(")\n")

if self.compositeComponent.size >0 then

	self.compositeComponent.each{c|c.pointcut2droolsPass1(ctx)}
end

if self.properties.size >0 then

	self.properties.each{c|c.pointcut2droolsPass1(ctx)}
end

if self.messages.size >0 then

	self.messages.each{c|c.pointcut2droolsPass1(ctx)}
end

if self.connectors.size >0 then

	self.connectors.each{c|c.pointcut2droolsPass1(ctx)}
end

if self.ports.size >0 then

	self.ports.each{c|c.pointcut2droolsPass1(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass1(ctx)}
end
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.Component(")
		ctx.res.append("this == "+varName+"Decl")
		ctx.res.append(")\n")

if self.compositeComponent.size >0 then

	self.compositeComponent.each{c|c.pointcut2droolsPass2(ctx)}
end

if self.properties.size >0 then

	self.properties.each{c|c.pointcut2droolsPass2(ctx)}
end

if self.messages.size >0 then

	self.messages.each{c|c.pointcut2droolsPass2(ctx)}
end

if self.connectors.size >0 then

	self.connectors.each{c|c.pointcut2droolsPass2(ctx)}
end

if self.ports.size >0 then

	self.ports.each{c|c.pointcut2droolsPass2(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass2(ctx)}
end
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.Component" +" "+ na +  " = null;
")	
if self.compositeComponent.size >0 then

	self.compositeComponent.each{c|c.generateDeclare(ctx)}
end

if self.properties.size >0 then

	self.properties.each{c|c.generateDeclare(ctx)}
end

if self.messages.size >0 then

	self.messages.each{c|c.generateDeclare(ctx)}
end

if self.connectors.size >0 then

	self.connectors.each{c|c.generateDeclare(ctx)}
end

if self.ports.size >0 then

	self.ports.each{c|c.generateDeclare(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.generateDeclare(ctx)}
end
end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.Component) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createComponent();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.Component) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createComponent();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.Component) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createComponent();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createComponent();
")

if self.compositeComponent.size >0 then

	self.compositeComponent.each{c|c.generatePerJoinPointStrategy(ctx)}
end

if self.properties.size >0 then

	self.properties.each{c|c.generatePerJoinPointStrategy(ctx)}
end

if self.messages.size >0 then

	self.messages.each{c|c.generatePerJoinPointStrategy(ctx)}
end

if self.connectors.size >0 then

	self.connectors.each{c|c.generatePerJoinPointStrategy(ctx)}
end

if self.ports.size >0 then

	self.ports.each{c|c.generatePerJoinPointStrategy(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.generatePerJoinPointStrategy(ctx)}
end
end

}aspect class Parameter {
method  pass2set(ctx:Context):Void is do 
 		if (not self.name.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Name"+"(\""+self.name.toString+"\");
")	
	end
	if (not self.type.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Type"+"("+ctx.cache.getValue(self.type)+");
")	
	end
end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.Parameter(")
			if (not self.name.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("name".replace("~","")+ctx.convert(self.name.toString))
		i := i+1	
	end
ctx.res.append(")\n")
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.Parameter(")
		ctx.res.append("this == "+varName+"Decl")
			if (not self.type.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("type".replace("~","")+" == "+ctx.cache.getValue(self.type)+"Decl")
	end
ctx.res.append(")\n")
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.Parameter" +" "+ na +  " = null;
")	end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.Parameter) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createParameter();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.Parameter) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createParameter();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.Parameter) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createParameter();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createParameter();
")
end

}aspect class EdapElement {
method  pass2set(ctx:Context):Void is do 
 	end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.EdapElement(")
		ctx.res.append(")\n")
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.EdapElement(")
		ctx.res.append("this == "+varName+"Decl")
		ctx.res.append(")\n")
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.EdapElement" +" "+ na +  " = null;
")	end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.EdapElement) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createEdapElement();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.EdapElement) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createEdapElement();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.EdapElement) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createEdapElement();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createEdapElement();
")
end

}aspect class Type {
method  pass2set(ctx:Context):Void is do 
 	end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.Type(")
		ctx.res.append(")\n")

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass1(ctx)}
end
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.Type(")
		ctx.res.append("this == "+varName+"Decl")
		ctx.res.append(")\n")

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass2(ctx)}
end
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.Type" +" "+ na +  " = null;
")	
if self.annotations.size >0 then

	self.annotations.each{c|c.generateDeclare(ctx)}
end
end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.Type) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createType();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.Type) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createType();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.Type) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createType();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createType();
")

if self.annotations.size >0 then

	self.annotations.each{c|c.generatePerJoinPointStrategy(ctx)}
end
end

}aspect class Property {
method  pass2set(ctx:Context):Void is do 
 		if (not self.changeable.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Changeable"+"("+self.changeable.toString+");
")	
	end
	if (not self.lowerBound.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"LowerBound"+"("+self.lowerBound.toString+");
")	
	end
	if (not self.upperBound.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"UpperBound"+"("+self.upperBound.toString+");
")	
	end
	if (not self.name.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Name"+"(\""+self.name.toString+"\");
")	
	end
	if (not self.type.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Type"+"("+ctx.cache.getValue(self.type)+");
")	
	end

	self.annotations.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Annotations"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



if self.annotations.size >0 then

	self.annotations.each{c|c.pass2set(ctx)}
end
end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.Property(")
			if (not self.changeable.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("changeable".replace("~","")+" == "+self.changeable.toString)
		i := i+1	
	end
	if (not self.lowerBound.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("lowerBound".replace("~","")+" == "+self.lowerBound.toString)
		i := i+1	
	end
	if (not self.upperBound.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("upperBound".replace("~","")+" == "+self.upperBound.toString)
		i := i+1	
	end
	if (not self.name.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("name".replace("~","")+ctx.convert(self.name.toString))
		i := i+1	
	end
ctx.res.append(")\n")

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass1(ctx)}
end
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.Property(")
		ctx.res.append("this == "+varName+"Decl")
			if (not self.type.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("type".replace("~","")+" == "+ctx.cache.getValue(self.type)+"Decl")
	end
	if (self.annotations.size > 0) then
		self.annotations.each{o |
			ctx.res.append(", ")
			ctx.res.append("annotations".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
ctx.res.append(")\n")

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass2(ctx)}
end
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.Property" +" "+ na +  " = null;
")	
if self.annotations.size >0 then

	self.annotations.each{c|c.generateDeclare(ctx)}
end
end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.Property) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createProperty();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.Property) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createProperty();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.Property) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createProperty();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createProperty();
")

if self.annotations.size >0 then

	self.annotations.each{c|c.generatePerJoinPointStrategy(ctx)}
end
end

}aspect class PlatformAnnotation {
method  pass2set(ctx:Context):Void is do 
 		if (not self.~value.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Value"+"(\""+self.~value.toString+"\");
")	
	end
	if (not self.name.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Name"+"(\""+self.name.toString+"\");
")	
	end
end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.PlatformAnnotation(")
			if (not self.~value.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("~value".replace("~","")+ctx.convert(self.~value.toString))
		i := i+1	
	end
	if (not self.name.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("name".replace("~","")+ctx.convert(self.name.toString))
		i := i+1	
	end
ctx.res.append(")\n")
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.PlatformAnnotation(")
		ctx.res.append("this == "+varName+"Decl")
		ctx.res.append(")\n")
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.PlatformAnnotation" +" "+ na +  " = null;
")	end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.PlatformAnnotation) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createPlatformAnnotation();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.PlatformAnnotation) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createPlatformAnnotation();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.PlatformAnnotation) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createPlatformAnnotation();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createPlatformAnnotation();
")
end

}aspect class Enumeration {
method  pass2set(ctx:Context):Void is do 
 		if (not self.name.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Name"+"(\""+self.name.toString+"\");
")	
	end

	self.literals.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Literals"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



	self.annotations.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Annotations"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



if self.literals.size >0 then

	self.literals.each{c|c.pass2set(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pass2set(ctx)}
end
end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.Enumeration(")
			if (not self.name.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("name".replace("~","")+ctx.convert(self.name.toString))
		i := i+1	
	end
ctx.res.append(")\n")

if self.literals.size >0 then

	self.literals.each{c|c.pointcut2droolsPass1(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass1(ctx)}
end
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.Enumeration(")
		ctx.res.append("this == "+varName+"Decl")
			if (self.literals.size > 0) then
		self.literals.each{o |
			ctx.res.append(", ")
			ctx.res.append("literals".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (self.annotations.size > 0) then
		self.annotations.each{o |
			ctx.res.append(", ")
			ctx.res.append("annotations".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
ctx.res.append(")\n")

if self.literals.size >0 then

	self.literals.each{c|c.pointcut2droolsPass2(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass2(ctx)}
end
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.Enumeration" +" "+ na +  " = null;
")	
if self.literals.size >0 then

	self.literals.each{c|c.generateDeclare(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.generateDeclare(ctx)}
end
end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.Enumeration) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createEnumeration();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.Enumeration) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createEnumeration();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.Enumeration) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createEnumeration();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createEnumeration();
")

if self.literals.size >0 then

	self.literals.each{c|c.generatePerJoinPointStrategy(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.generatePerJoinPointStrategy(ctx)}
end
end

}aspect class PrimitiveType {
method  pass2set(ctx:Context):Void is do 
 		if (not self.name.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Name"+"(\""+self.name.toString+"\");
")	
	end

	self.annotations.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Annotations"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



if self.annotations.size >0 then

	self.annotations.each{c|c.pass2set(ctx)}
end
end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.PrimitiveType(")
			if (not self.name.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("name".replace("~","")+ctx.convert(self.name.toString))
		i := i+1	
	end
ctx.res.append(")\n")

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass1(ctx)}
end
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.PrimitiveType(")
		ctx.res.append("this == "+varName+"Decl")
			if (self.annotations.size > 0) then
		self.annotations.each{o |
			ctx.res.append(", ")
			ctx.res.append("annotations".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
ctx.res.append(")\n")

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass2(ctx)}
end
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.PrimitiveType" +" "+ na +  " = null;
")	
if self.annotations.size >0 then

	self.annotations.each{c|c.generateDeclare(ctx)}
end
end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.PrimitiveType) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createPrimitiveType();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.PrimitiveType) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createPrimitiveType();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.PrimitiveType) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createPrimitiveType();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createPrimitiveType();
")

if self.annotations.size >0 then

	self.annotations.each{c|c.generatePerJoinPointStrategy(ctx)}
end
end

}aspect class EnumerationLiteral {
method  pass2set(ctx:Context):Void is do 
 		if (not self.name.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Name"+"(\""+self.name.toString+"\");
")	
	end

	self.annotations.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Annotations"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



if self.annotations.size >0 then

	self.annotations.each{c|c.pass2set(ctx)}
end
end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.EnumerationLiteral(")
			if (not self.name.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("name".replace("~","")+ctx.convert(self.name.toString))
		i := i+1	
	end
ctx.res.append(")\n")

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass1(ctx)}
end
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.EnumerationLiteral(")
		ctx.res.append("this == "+varName+"Decl")
			if (self.annotations.size > 0) then
		self.annotations.each{o |
			ctx.res.append(", ")
			ctx.res.append("annotations".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
ctx.res.append(")\n")

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass2(ctx)}
end
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.EnumerationLiteral" +" "+ na +  " = null;
")	
if self.annotations.size >0 then

	self.annotations.each{c|c.generateDeclare(ctx)}
end
end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.EnumerationLiteral) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createEnumerationLiteral();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.EnumerationLiteral) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createEnumerationLiteral();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.EnumerationLiteral) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createEnumerationLiteral();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createEnumerationLiteral();
")

if self.annotations.size >0 then

	self.annotations.each{c|c.generatePerJoinPointStrategy(ctx)}
end
end

}aspect class AnnotatedElement {
method  pass2set(ctx:Context):Void is do 
 	end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.AnnotatedElement(")
		ctx.res.append(")\n")

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass1(ctx)}
end
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.AnnotatedElement(")
		ctx.res.append("this == "+varName+"Decl")
		ctx.res.append(")\n")

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass2(ctx)}
end
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.AnnotatedElement" +" "+ na +  " = null;
")	
if self.annotations.size >0 then

	self.annotations.each{c|c.generateDeclare(ctx)}
end
end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.AnnotatedElement) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createAnnotatedElement();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.AnnotatedElement) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\n;
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createAnnotatedElement();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.AnnotatedElement) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createAnnotatedElement();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createAnnotatedElement();
")

if self.annotations.size >0 then

	self.annotations.each{c|c.generatePerJoinPointStrategy(ctx)}
end
end

}aspect class StateMachine {
method  pass2set(ctx:Context):Void is do 
 		if (not self.name.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Name"+"(\""+self.name.toString+"\");
")	
	end

	self.substate.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Substate"+"().add("+ctx.cache.getValue(c)+");
")	
	}	


	if (not self.initial.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Initial"+"("+ctx.cache.getValue(self.initial)+");
")	
	end

	self.outgoing.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Outgoing"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



	self.incoming.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Incoming"+"().add("+ctx.cache.getValue(c)+");
")	
	}	


	if (not self.entry.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Entry"+"("+ctx.cache.getValue(self.entry)+");
")	
	end
	if (not self.exit.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Exit"+"("+ctx.cache.getValue(self.exit)+");
")	
	end

	self.properties.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Properties"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



	self.annotations.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Annotations"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



if self.substate.size >0 then

	self.substate.each{c|c.pass2set(ctx)}
end

if self.outgoing.size >0 then

	self.outgoing.each{c|c.pass2set(ctx)}
end

if not self.entry.isVoid then

	self.entry.pass2set(ctx)
end

if not self.exit.isVoid then

	self.exit.pass2set(ctx)
end

if self.properties.size >0 then

	self.properties.each{c|c.pass2set(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pass2set(ctx)}
end
end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.StateMachine(")
			if (not self.name.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("name".replace("~","")+ctx.convert(self.name.toString))
		i := i+1	
	end
ctx.res.append(")\n")

if self.substate.size >0 then

	self.substate.each{c|c.pointcut2droolsPass1(ctx)}
end

if self.outgoing.size >0 then

	self.outgoing.each{c|c.pointcut2droolsPass1(ctx)}
end

if not self.entry.isVoid then

	self.entry.pointcut2droolsPass1(ctx)
end

if not self.exit.isVoid then

	self.exit.pointcut2droolsPass1(ctx)
end

if self.properties.size >0 then

	self.properties.each{c|c.pointcut2droolsPass1(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass1(ctx)}
end
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.StateMachine(")
		ctx.res.append("this == "+varName+"Decl")
			if (self.substate.size > 0) then
		self.substate.each{o |
			ctx.res.append(", ")
			ctx.res.append("substate".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (not self.initial.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("initial".replace("~","")+" == "+ctx.cache.getValue(self.initial)+"Decl")
	end
	if (self.outgoing.size > 0) then
		self.outgoing.each{o |
			ctx.res.append(", ")
			ctx.res.append("outgoing".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (self.incoming.size > 0) then
		self.incoming.each{o |
			ctx.res.append(", ")
			ctx.res.append("incoming".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (not self.entry.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("entry".replace("~","")+" == "+ctx.cache.getValue(self.entry)+"Decl")
	end
	if (not self.exit.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("exit".replace("~","")+" == "+ctx.cache.getValue(self.exit)+"Decl")
	end
	if (self.properties.size > 0) then
		self.properties.each{o |
			ctx.res.append(", ")
			ctx.res.append("properties".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (self.annotations.size > 0) then
		self.annotations.each{o |
			ctx.res.append(", ")
			ctx.res.append("annotations".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
ctx.res.append(")\n")

if self.substate.size >0 then

	self.substate.each{c|c.pointcut2droolsPass2(ctx)}
end

if self.outgoing.size >0 then

	self.outgoing.each{c|c.pointcut2droolsPass2(ctx)}
end

if not self.entry.isVoid then

	self.entry.pointcut2droolsPass2(ctx)
end

if not self.exit.isVoid then

	self.exit.pointcut2droolsPass2(ctx)
end

if self.properties.size >0 then

	self.properties.each{c|c.pointcut2droolsPass2(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass2(ctx)}
end
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.StateMachine" +" "+ na +  " = null;
")	
if self.substate.size >0 then

	self.substate.each{c|c.generateDeclare(ctx)}
end

if self.outgoing.size >0 then

	self.outgoing.each{c|c.generateDeclare(ctx)}
end

if not self.entry.isVoid then

	self.entry.generateDeclare(ctx)
end

if not self.exit.isVoid then

	self.exit.generateDeclare(ctx)
end

if self.properties.size >0 then

	self.properties.each{c|c.generateDeclare(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.generateDeclare(ctx)}
end
end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.StateMachine) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createStateMachine();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.StateMachine) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createStateMachine();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.StateMachine) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createStateMachine();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createStateMachine();
")

if self.substate.size >0 then

	self.substate.each{c|c.generatePerJoinPointStrategy(ctx)}
end

if self.outgoing.size >0 then

	self.outgoing.each{c|c.generatePerJoinPointStrategy(ctx)}
end

if not self.entry.isVoid then

	self.entry.generatePerJoinPointStrategy(ctx)
end

if not self.exit.isVoid then

	self.exit.generatePerJoinPointStrategy(ctx)
end

if self.properties.size >0 then

	self.properties.each{c|c.generatePerJoinPointStrategy(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.generatePerJoinPointStrategy(ctx)}
end
end

}aspect class Transition {
method  pass2set(ctx:Context):Void is do 
 		if (not self.name.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Name"+"(\""+self.name.toString+"\");
")	
	end

	self.event.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Event"+"().add("+ctx.cache.getValue(c)+");
")	
	}	


	if (not self.guard.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Guard"+"("+ctx.cache.getValue(self.guard)+");
")	
	end
	if (not self.action.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Action"+"("+ctx.cache.getValue(self.action)+");
")	
	end
	if (not self.target.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Target"+"("+ctx.cache.getValue(self.target)+");
")	
	end
	if (not self.source.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Source"+"("+ctx.cache.getValue(self.source)+");
")	
	end

	self.annotations.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Annotations"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



if self.event.size >0 then

	self.event.each{c|c.pass2set(ctx)}
end

if not self.guard.isVoid then

	self.guard.pass2set(ctx)
end

if not self.action.isVoid then

	self.action.pass2set(ctx)
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pass2set(ctx)}
end
end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.Transition(")
			if (not self.name.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("name".replace("~","")+ctx.convert(self.name.toString))
		i := i+1	
	end
ctx.res.append(")\n")

if self.event.size >0 then

	self.event.each{c|c.pointcut2droolsPass1(ctx)}
end

if not self.guard.isVoid then

	self.guard.pointcut2droolsPass1(ctx)
end

if not self.action.isVoid then

	self.action.pointcut2droolsPass1(ctx)
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass1(ctx)}
end
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.Transition(")
		ctx.res.append("this == "+varName+"Decl")
			if (self.event.size > 0) then
		self.event.each{o |
			ctx.res.append(", ")
			ctx.res.append("event".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (not self.guard.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("guard".replace("~","")+" == "+ctx.cache.getValue(self.guard)+"Decl")
	end
	if (not self.action.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("action".replace("~","")+" == "+ctx.cache.getValue(self.action)+"Decl")
	end
	if (not self.target.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("target".replace("~","")+" == "+ctx.cache.getValue(self.target)+"Decl")
	end
	if (not self.source.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("source".replace("~","")+" == "+ctx.cache.getValue(self.source)+"Decl")
	end
	if (self.annotations.size > 0) then
		self.annotations.each{o |
			ctx.res.append(", ")
			ctx.res.append("annotations".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
ctx.res.append(")\n")

if self.event.size >0 then

	self.event.each{c|c.pointcut2droolsPass2(ctx)}
end

if not self.guard.isVoid then

	self.guard.pointcut2droolsPass2(ctx)
end

if not self.action.isVoid then

	self.action.pointcut2droolsPass2(ctx)
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass2(ctx)}
end
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.Transition" +" "+ na +  " = null;
")	
if self.event.size >0 then

	self.event.each{c|c.generateDeclare(ctx)}
end

if not self.guard.isVoid then

	self.guard.generateDeclare(ctx)
end

if not self.action.isVoid then

	self.action.generateDeclare(ctx)
end

if self.annotations.size >0 then

	self.annotations.each{c|c.generateDeclare(ctx)}
end
end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.Transition) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createTransition();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.Transition) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createTransition();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.Transition) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createTransition();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createTransition();
")

if self.event.size >0 then

	self.event.each{c|c.generatePerJoinPointStrategy(ctx)}
end

if not self.guard.isVoid then

	self.guard.generatePerJoinPointStrategy(ctx)
end

if not self.action.isVoid then

	self.action.generatePerJoinPointStrategy(ctx)
end

if self.annotations.size >0 then

	self.annotations.each{c|c.generatePerJoinPointStrategy(ctx)}
end
end

}aspect class State {
method  pass2set(ctx:Context):Void is do 
 		if (not self.name.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Name"+"(\""+self.name.toString+"\");
")	
	end

	self.outgoing.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Outgoing"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



	self.incoming.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Incoming"+"().add("+ctx.cache.getValue(c)+");
")	
	}	


	if (not self.entry.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Entry"+"("+ctx.cache.getValue(self.entry)+");
")	
	end
	if (not self.exit.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Exit"+"("+ctx.cache.getValue(self.exit)+");
")	
	end

	self.properties.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Properties"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



	self.annotations.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Annotations"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



if self.outgoing.size >0 then

	self.outgoing.each{c|c.pass2set(ctx)}
end

if not self.entry.isVoid then

	self.entry.pass2set(ctx)
end

if not self.exit.isVoid then

	self.exit.pass2set(ctx)
end

if self.properties.size >0 then

	self.properties.each{c|c.pass2set(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pass2set(ctx)}
end
end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.State(")
			if (not self.name.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("name".replace("~","")+ctx.convert(self.name.toString))
		i := i+1	
	end
ctx.res.append(")\n")

if self.outgoing.size >0 then

	self.outgoing.each{c|c.pointcut2droolsPass1(ctx)}
end

if not self.entry.isVoid then

	self.entry.pointcut2droolsPass1(ctx)
end

if not self.exit.isVoid then

	self.exit.pointcut2droolsPass1(ctx)
end

if self.properties.size >0 then

	self.properties.each{c|c.pointcut2droolsPass1(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass1(ctx)}
end
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.State(")
		ctx.res.append("this == "+varName+"Decl")
			if (self.outgoing.size > 0) then
		self.outgoing.each{o |
			ctx.res.append(", ")
			ctx.res.append("outgoing".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (self.incoming.size > 0) then
		self.incoming.each{o |
			ctx.res.append(", ")
			ctx.res.append("incoming".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (not self.entry.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("entry".replace("~","")+" == "+ctx.cache.getValue(self.entry)+"Decl")
	end
	if (not self.exit.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("exit".replace("~","")+" == "+ctx.cache.getValue(self.exit)+"Decl")
	end
	if (self.properties.size > 0) then
		self.properties.each{o |
			ctx.res.append(", ")
			ctx.res.append("properties".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (self.annotations.size > 0) then
		self.annotations.each{o |
			ctx.res.append(", ")
			ctx.res.append("annotations".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
ctx.res.append(")\n")

if self.outgoing.size >0 then

	self.outgoing.each{c|c.pointcut2droolsPass2(ctx)}
end

if not self.entry.isVoid then

	self.entry.pointcut2droolsPass2(ctx)
end

if not self.exit.isVoid then

	self.exit.pointcut2droolsPass2(ctx)
end

if self.properties.size >0 then

	self.properties.each{c|c.pointcut2droolsPass2(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass2(ctx)}
end
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.State" +" "+ na +  " = null;
")	
if self.outgoing.size >0 then

	self.outgoing.each{c|c.generateDeclare(ctx)}
end

if not self.entry.isVoid then

	self.entry.generateDeclare(ctx)
end

if not self.exit.isVoid then

	self.exit.generateDeclare(ctx)
end

if self.properties.size >0 then

	self.properties.each{c|c.generateDeclare(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.generateDeclare(ctx)}
end
end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.State) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createState();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.State) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createState();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.State) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createState();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createState();
")

if self.outgoing.size >0 then

	self.outgoing.each{c|c.generatePerJoinPointStrategy(ctx)}
end

if not self.entry.isVoid then

	self.entry.generatePerJoinPointStrategy(ctx)
end

if not self.exit.isVoid then

	self.exit.generatePerJoinPointStrategy(ctx)
end

if self.properties.size >0 then

	self.properties.each{c|c.generatePerJoinPointStrategy(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.generatePerJoinPointStrategy(ctx)}
end
end

}aspect class CompositeState {
method  pass2set(ctx:Context):Void is do 
 		if (not self.name.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Name"+"(\""+self.name.toString+"\");
")	
	end

	self.substate.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Substate"+"().add("+ctx.cache.getValue(c)+");
")	
	}	


	if (not self.initial.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Initial"+"("+ctx.cache.getValue(self.initial)+");
")	
	end

	self.outgoing.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Outgoing"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



	self.incoming.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Incoming"+"().add("+ctx.cache.getValue(c)+");
")	
	}	


	if (not self.entry.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Entry"+"("+ctx.cache.getValue(self.entry)+");
")	
	end
	if (not self.exit.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Exit"+"("+ctx.cache.getValue(self.exit)+");
")	
	end

	self.properties.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Properties"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



	self.annotations.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Annotations"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



if self.substate.size >0 then

	self.substate.each{c|c.pass2set(ctx)}
end

if self.outgoing.size >0 then

	self.outgoing.each{c|c.pass2set(ctx)}
end

if not self.entry.isVoid then

	self.entry.pass2set(ctx)
end

if not self.exit.isVoid then

	self.exit.pass2set(ctx)
end

if self.properties.size >0 then

	self.properties.each{c|c.pass2set(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pass2set(ctx)}
end
end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.CompositeState(")
			if (not self.name.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("name".replace("~","")+ctx.convert(self.name.toString))
		i := i+1	
	end
ctx.res.append(")\n")

if self.substate.size >0 then

	self.substate.each{c|c.pointcut2droolsPass1(ctx)}
end

if self.outgoing.size >0 then

	self.outgoing.each{c|c.pointcut2droolsPass1(ctx)}
end

if not self.entry.isVoid then

	self.entry.pointcut2droolsPass1(ctx)
end

if not self.exit.isVoid then

	self.exit.pointcut2droolsPass1(ctx)
end

if self.properties.size >0 then

	self.properties.each{c|c.pointcut2droolsPass1(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass1(ctx)}
end
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.CompositeState(")
		ctx.res.append("this == "+varName+"Decl")
			if (self.substate.size > 0) then
		self.substate.each{o |
			ctx.res.append(", ")
			ctx.res.append("substate".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (not self.initial.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("initial".replace("~","")+" == "+ctx.cache.getValue(self.initial)+"Decl")
	end
	if (self.outgoing.size > 0) then
		self.outgoing.each{o |
			ctx.res.append(", ")
			ctx.res.append("outgoing".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (self.incoming.size > 0) then
		self.incoming.each{o |
			ctx.res.append(", ")
			ctx.res.append("incoming".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (not self.entry.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("entry".replace("~","")+" == "+ctx.cache.getValue(self.entry)+"Decl")
	end
	if (not self.exit.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("exit".replace("~","")+" == "+ctx.cache.getValue(self.exit)+"Decl")
	end
	if (self.properties.size > 0) then
		self.properties.each{o |
			ctx.res.append(", ")
			ctx.res.append("properties".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (self.annotations.size > 0) then
		self.annotations.each{o |
			ctx.res.append(", ")
			ctx.res.append("annotations".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
ctx.res.append(")\n")

if self.substate.size >0 then

	self.substate.each{c|c.pointcut2droolsPass2(ctx)}
end

if self.outgoing.size >0 then

	self.outgoing.each{c|c.pointcut2droolsPass2(ctx)}
end

if not self.entry.isVoid then

	self.entry.pointcut2droolsPass2(ctx)
end

if not self.exit.isVoid then

	self.exit.pointcut2droolsPass2(ctx)
end

if self.properties.size >0 then

	self.properties.each{c|c.pointcut2droolsPass2(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass2(ctx)}
end
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.CompositeState" +" "+ na +  " = null;
")	
if self.substate.size >0 then

	self.substate.each{c|c.generateDeclare(ctx)}
end

if self.outgoing.size >0 then

	self.outgoing.each{c|c.generateDeclare(ctx)}
end

if not self.entry.isVoid then

	self.entry.generateDeclare(ctx)
end

if not self.exit.isVoid then

	self.exit.generateDeclare(ctx)
end

if self.properties.size >0 then

	self.properties.each{c|c.generateDeclare(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.generateDeclare(ctx)}
end
end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.CompositeState) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createCompositeState();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.CompositeState) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createCompositeState();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.CompositeState) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createCompositeState();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createCompositeState();
")

if self.substate.size >0 then

	self.substate.each{c|c.generatePerJoinPointStrategy(ctx)}
end

if self.outgoing.size >0 then

	self.outgoing.each{c|c.generatePerJoinPointStrategy(ctx)}
end

if not self.entry.isVoid then

	self.entry.generatePerJoinPointStrategy(ctx)
end

if not self.exit.isVoid then

	self.exit.generatePerJoinPointStrategy(ctx)
end

if self.properties.size >0 then

	self.properties.each{c|c.generatePerJoinPointStrategy(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.generatePerJoinPointStrategy(ctx)}
end
end

}aspect class Action {
method  pass2set(ctx:Context):Void is do 
 	end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.Action(")
		ctx.res.append(")\n")

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass1(ctx)}
end
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.Action(")
		ctx.res.append("this == "+varName+"Decl")
		ctx.res.append(")\n")

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass2(ctx)}
end
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.Action" +" "+ na +  " = null;
")	
if self.annotations.size >0 then

	self.annotations.each{c|c.generateDeclare(ctx)}
end
end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.Action) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createAction();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.Action) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createAction();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.Action) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createAction();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createAction();
")

if self.annotations.size >0 then

	self.annotations.each{c|c.generatePerJoinPointStrategy(ctx)}
end
end

}aspect class ActionBlock {
method  pass2set(ctx:Context):Void is do 
 		if (not self.name.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Name"+"(\""+self.name.toString+"\");
")	
	end

	self.actions.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Actions"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



	self.annotations.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Annotations"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



if self.actions.size >0 then

	self.actions.each{c|c.pass2set(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pass2set(ctx)}
end
end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.ActionBlock(")
			if (not self.name.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("name".replace("~","")+ctx.convert(self.name.toString))
		i := i+1	
	end
ctx.res.append(")\n")

if self.actions.size >0 then

	self.actions.each{c|c.pointcut2droolsPass1(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass1(ctx)}
end
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.ActionBlock(")
		ctx.res.append("this == "+varName+"Decl")
			if (self.actions.size > 0) then
		self.actions.each{o |
			ctx.res.append(", ")
			ctx.res.append("actions".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (self.annotations.size > 0) then
		self.annotations.each{o |
			ctx.res.append(", ")
			ctx.res.append("annotations".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
ctx.res.append(")\n")

if self.actions.size >0 then

	self.actions.each{c|c.pointcut2droolsPass2(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass2(ctx)}
end
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.ActionBlock" +" "+ na +  " = null;
")	
if self.actions.size >0 then

	self.actions.each{c|c.generateDeclare(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.generateDeclare(ctx)}
end
end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.ActionBlock) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createActionBlock();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.ActionBlock) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createActionBlock();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.ActionBlock) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createActionBlock();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createActionBlock();
")

if self.actions.size >0 then

	self.actions.each{c|c.generatePerJoinPointStrategy(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.generatePerJoinPointStrategy(ctx)}
end
end

}aspect class ExternStatement {
method  pass2set(ctx:Context):Void is do 
 		if (not self.statement.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Statement"+"(\""+self.statement.toString+"\");
")	
	end
	if (not self.name.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Name"+"(\""+self.name.toString+"\");
")	
	end

	self.annotations.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Annotations"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



if self.annotations.size >0 then

	self.annotations.each{c|c.pass2set(ctx)}
end
end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.ExternStatement(")
			if (not self.statement.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("statement".replace("~","")+ctx.convert(self.statement.toString))
		i := i+1	
	end
	if (not self.name.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("name".replace("~","")+ctx.convert(self.name.toString))
		i := i+1	
	end
ctx.res.append(")\n")

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass1(ctx)}
end
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.ExternStatement(")
		ctx.res.append("this == "+varName+"Decl")
			if (self.annotations.size > 0) then
		self.annotations.each{o |
			ctx.res.append(", ")
			ctx.res.append("annotations".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
ctx.res.append(")\n")

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass2(ctx)}
end
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.ExternStatement" +" "+ na +  " = null;
")	
if self.annotations.size >0 then

	self.annotations.each{c|c.generateDeclare(ctx)}
end
end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.ExternStatement) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createExternStatement();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.ExternStatement) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createExternStatement();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.ExternStatement) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createExternStatement();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createExternStatement();
")

if self.annotations.size >0 then

	self.annotations.each{c|c.generatePerJoinPointStrategy(ctx)}
end
end

}aspect class Expression {
method  pass2set(ctx:Context):Void is do 
 	end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.Expression(")
		ctx.res.append(")\n")
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.Expression(")
		ctx.res.append("this == "+varName+"Decl")
		ctx.res.append(")\n")
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.Expression" +" "+ na +  " = null;
")	end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.Expression) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createExpression();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.Expression) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createExpression();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.Expression) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createExpression();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createExpression();
")
end

}aspect class ExternExpression {
method  pass2set(ctx:Context):Void is do 
 		if (not self.expression.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Expression"+"(\""+self.expression.toString+"\");
")	
	end
end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.ExternExpression(")
			if (not self.expression.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("expression".replace("~","")+ctx.convert(self.expression.toString))
		i := i+1	
	end
ctx.res.append(")\n")
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.ExternExpression(")
		ctx.res.append("this == "+varName+"Decl")
		ctx.res.append(")\n")
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.ExternExpression" +" "+ na +  " = null;
")	end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.ExternExpression) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createExternExpression();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.ExternExpression) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createExternExpression();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.ExternExpression) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createExternExpression();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createExternExpression();
")
end

}aspect class SendAction {
method  pass2set(ctx:Context):Void is do 
 	end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.SendAction(")
		ctx.res.append(")\n")

if self.parameters.size >0 then

	self.parameters.each{c|c.pointcut2droolsPass1(ctx)}
end

if not self.target.isVoid then

	self.target.pointcut2droolsPass1(ctx)
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass1(ctx)}
end
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.SendAction(")
		ctx.res.append("this == "+varName+"Decl")
		ctx.res.append(")\n")

if self.parameters.size >0 then

	self.parameters.each{c|c.pointcut2droolsPass2(ctx)}
end

if not self.target.isVoid then

	self.target.pointcut2droolsPass2(ctx)
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass2(ctx)}
end
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.SendAction" +" "+ na +  " = null;
")	
if self.parameters.size >0 then

	self.parameters.each{c|c.generateDeclare(ctx)}
end

if not self.target.isVoid then

	self.target.generateDeclare(ctx)
end

if self.annotations.size >0 then

	self.annotations.each{c|c.generateDeclare(ctx)}
end
end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.SendAction) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createSendAction();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.SendAction) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createSendAction();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.SendAction) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createSendAction();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createSendAction();
")

if self.parameters.size >0 then

	self.parameters.each{c|c.generatePerJoinPointStrategy(ctx)}
end

if not self.target.isVoid then

	self.target.generatePerJoinPointStrategy(ctx)
end

if self.annotations.size >0 then

	self.annotations.each{c|c.generatePerJoinPointStrategy(ctx)}
end
end

}aspect class Broadcast {
method  pass2set(ctx:Context):Void is do 
 		if (not self.name.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Name"+"(\""+self.name.toString+"\");
")	
	end

	self.parameters.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Parameters"+"().add("+ctx.cache.getValue(c)+");
")	
	}	


	if (not self.target.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Target"+"("+ctx.cache.getValue(self.target)+");
")	
	end
	if (not self.message.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Message"+"("+ctx.cache.getValue(self.message)+");
")	
	end
	if (not self.port.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Port"+"("+ctx.cache.getValue(self.port)+");
")	
	end

	self.annotations.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Annotations"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



if self.parameters.size >0 then

	self.parameters.each{c|c.pass2set(ctx)}
end

if not self.target.isVoid then

	self.target.pass2set(ctx)
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pass2set(ctx)}
end
end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.Broadcast(")
			if (not self.name.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("name".replace("~","")+ctx.convert(self.name.toString))
		i := i+1	
	end
ctx.res.append(")\n")

if self.parameters.size >0 then

	self.parameters.each{c|c.pointcut2droolsPass1(ctx)}
end

if not self.target.isVoid then

	self.target.pointcut2droolsPass1(ctx)
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass1(ctx)}
end
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.Broadcast(")
		ctx.res.append("this == "+varName+"Decl")
			if (self.parameters.size > 0) then
		self.parameters.each{o |
			ctx.res.append(", ")
			ctx.res.append("parameters".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (not self.target.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("target".replace("~","")+" == "+ctx.cache.getValue(self.target)+"Decl")
	end
	if (not self.message.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("message".replace("~","")+" == "+ctx.cache.getValue(self.message)+"Decl")
	end
	if (not self.port.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("port".replace("~","")+" == "+ctx.cache.getValue(self.port)+"Decl")
	end
	if (self.annotations.size > 0) then
		self.annotations.each{o |
			ctx.res.append(", ")
			ctx.res.append("annotations".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
ctx.res.append(")\n")

if self.parameters.size >0 then

	self.parameters.each{c|c.pointcut2droolsPass2(ctx)}
end

if not self.target.isVoid then

	self.target.pointcut2droolsPass2(ctx)
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass2(ctx)}
end
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.Broadcast" +" "+ na +  " = null;
")	
if self.parameters.size >0 then

	self.parameters.each{c|c.generateDeclare(ctx)}
end

if not self.target.isVoid then

	self.target.generateDeclare(ctx)
end

if self.annotations.size >0 then

	self.annotations.each{c|c.generateDeclare(ctx)}
end
end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.Broadcast) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createBroadcast();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.Broadcast) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createBroadcast();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.Broadcast) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createBroadcast();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createBroadcast();
")

if self.parameters.size >0 then

	self.parameters.each{c|c.generatePerJoinPointStrategy(ctx)}
end

if not self.target.isVoid then

	self.target.generatePerJoinPointStrategy(ctx)
end

if self.annotations.size >0 then

	self.annotations.each{c|c.generatePerJoinPointStrategy(ctx)}
end
end

}aspect class Unicast {
method  pass2set(ctx:Context):Void is do 
 		if (not self.name.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Name"+"(\""+self.name.toString+"\");
")	
	end

	self.parameters.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Parameters"+"().add("+ctx.cache.getValue(c)+");
")	
	}	


	if (not self.target.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Target"+"("+ctx.cache.getValue(self.target)+");
")	
	end
	if (not self.message.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Message"+"("+ctx.cache.getValue(self.message)+");
")	
	end
	if (not self.port.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Port"+"("+ctx.cache.getValue(self.port)+");
")	
	end

	self.annotations.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Annotations"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



if self.parameters.size >0 then

	self.parameters.each{c|c.pass2set(ctx)}
end

if not self.target.isVoid then

	self.target.pass2set(ctx)
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pass2set(ctx)}
end
end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.Unicast(")
			if (not self.name.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("name".replace("~","")+ctx.convert(self.name.toString))
		i := i+1	
	end
ctx.res.append(")\n")

if self.parameters.size >0 then

	self.parameters.each{c|c.pointcut2droolsPass1(ctx)}
end

if not self.target.isVoid then

	self.target.pointcut2droolsPass1(ctx)
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass1(ctx)}
end
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.Unicast(")
		ctx.res.append("this == "+varName+"Decl")
			if (self.parameters.size > 0) then
		self.parameters.each{o |
			ctx.res.append(", ")
			ctx.res.append("parameters".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (not self.target.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("target".replace("~","")+" == "+ctx.cache.getValue(self.target)+"Decl")
	end
	if (not self.message.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("message".replace("~","")+" == "+ctx.cache.getValue(self.message)+"Decl")
	end
	if (not self.port.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("port".replace("~","")+" == "+ctx.cache.getValue(self.port)+"Decl")
	end
	if (self.annotations.size > 0) then
		self.annotations.each{o |
			ctx.res.append(", ")
			ctx.res.append("annotations".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
ctx.res.append(")\n")

if self.parameters.size >0 then

	self.parameters.each{c|c.pointcut2droolsPass2(ctx)}
end

if not self.target.isVoid then

	self.target.pointcut2droolsPass2(ctx)
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass2(ctx)}
end
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.Unicast" +" "+ na +  " = null;
")	
if self.parameters.size >0 then

	self.parameters.each{c|c.generateDeclare(ctx)}
end

if not self.target.isVoid then

	self.target.generateDeclare(ctx)
end

if self.annotations.size >0 then

	self.annotations.each{c|c.generateDeclare(ctx)}
end
end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.Unicast) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createUnicast();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.Unicast) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createUnicast();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.Unicast) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createUnicast();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createUnicast();
")

if self.parameters.size >0 then

	self.parameters.each{c|c.generatePerJoinPointStrategy(ctx)}
end

if not self.target.isVoid then

	self.target.generatePerJoinPointStrategy(ctx)
end

if self.annotations.size >0 then

	self.annotations.each{c|c.generatePerJoinPointStrategy(ctx)}
end
end

}aspect class PropertyAssignment {
method  pass2set(ctx:Context):Void is do 
 		if (not self.name.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Name"+"(\""+self.name.toString+"\");
")	
	end
	if (not self.~property.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Property"+"("+ctx.cache.getValue(self.~property)+");
")	
	end
	if (not self.expression.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Expression"+"("+ctx.cache.getValue(self.expression)+");
")	
	end

	self.annotations.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Annotations"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



if not self.expression.isVoid then

	self.expression.pass2set(ctx)
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pass2set(ctx)}
end
end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.PropertyAssignment(")
			if (not self.name.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("name".replace("~","")+ctx.convert(self.name.toString))
		i := i+1	
	end
ctx.res.append(")\n")

if not self.expression.isVoid then

	self.expression.pointcut2droolsPass1(ctx)
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass1(ctx)}
end
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.PropertyAssignment(")
		ctx.res.append("this == "+varName+"Decl")
			if (not self.~property.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("~property".replace("~","")+" == "+ctx.cache.getValue(self.~property)+"Decl")
	end
	if (not self.expression.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("expression".replace("~","")+" == "+ctx.cache.getValue(self.expression)+"Decl")
	end
	if (self.annotations.size > 0) then
		self.annotations.each{o |
			ctx.res.append(", ")
			ctx.res.append("annotations".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
ctx.res.append(")\n")

if not self.expression.isVoid then

	self.expression.pointcut2droolsPass2(ctx)
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass2(ctx)}
end
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.PropertyAssignment" +" "+ na +  " = null;
")	
if not self.expression.isVoid then

	self.expression.generateDeclare(ctx)
end

if self.annotations.size >0 then

	self.annotations.each{c|c.generateDeclare(ctx)}
end
end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.PropertyAssignment) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createPropertyAssignment();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.PropertyAssignment) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createPropertyAssignment();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.PropertyAssignment) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createPropertyAssignment();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createPropertyAssignment();
")

if not self.expression.isVoid then

	self.expression.generatePerJoinPointStrategy(ctx)
end

if self.annotations.size >0 then

	self.annotations.each{c|c.generatePerJoinPointStrategy(ctx)}
end
end

}aspect class SoftwareComponent {
method  pass2set(ctx:Context):Void is do 
 		if (not self.partial.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Partial"+"("+self.partial.toString+");
")	
	end
	if (not self.singleton.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Singleton"+"("+self.singleton.toString+");
")	
	end
	if (not self.name.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Name"+"(\""+self.name.toString+"\");
")	
	end
	if (not self.behaviour.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Behaviour"+"("+ctx.cache.getValue(self.behaviour)+");
")	
	end

	self.compositeComponent.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"CompositeComponent"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



	self.properties.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Properties"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



	self.receives.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Receives"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



	self.sends.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Sends"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



	self.messages.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Messages"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



	self.connectors.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Connectors"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



	self.ports.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Ports"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



	self.annotations.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Annotations"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



if not self.behaviour.isVoid then

	self.behaviour.pass2set(ctx)
end

if self.compositeComponent.size >0 then

	self.compositeComponent.each{c|c.pass2set(ctx)}
end

if self.properties.size >0 then

	self.properties.each{c|c.pass2set(ctx)}
end

if self.messages.size >0 then

	self.messages.each{c|c.pass2set(ctx)}
end

if self.connectors.size >0 then

	self.connectors.each{c|c.pass2set(ctx)}
end

if self.ports.size >0 then

	self.ports.each{c|c.pass2set(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pass2set(ctx)}
end
end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.SoftwareComponent(")
			if (not self.partial.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("partial".replace("~","")+" == "+self.partial.toString)
		i := i+1	
	end
	if (not self.singleton.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("singleton".replace("~","")+" == "+self.singleton.toString)
		i := i+1	
	end
	if (not self.name.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("name".replace("~","")+ctx.convert(self.name.toString))
		i := i+1	
	end
ctx.res.append(")\n")

if not self.behaviour.isVoid then

	self.behaviour.pointcut2droolsPass1(ctx)
end

if self.compositeComponent.size >0 then

	self.compositeComponent.each{c|c.pointcut2droolsPass1(ctx)}
end

if self.properties.size >0 then

	self.properties.each{c|c.pointcut2droolsPass1(ctx)}
end

if self.messages.size >0 then

	self.messages.each{c|c.pointcut2droolsPass1(ctx)}
end

if self.connectors.size >0 then

	self.connectors.each{c|c.pointcut2droolsPass1(ctx)}
end

if self.ports.size >0 then

	self.ports.each{c|c.pointcut2droolsPass1(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass1(ctx)}
end
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.SoftwareComponent(")
		ctx.res.append("this == "+varName+"Decl")
			if (not self.behaviour.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("behaviour".replace("~","")+" == "+ctx.cache.getValue(self.behaviour)+"Decl")
	end
	if (self.compositeComponent.size > 0) then
		self.compositeComponent.each{o |
			ctx.res.append(", ")
			ctx.res.append("compositeComponent".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (self.properties.size > 0) then
		self.properties.each{o |
			ctx.res.append(", ")
			ctx.res.append("properties".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (self.receives.size > 0) then
		self.receives.each{o |
			ctx.res.append(", ")
			ctx.res.append("receives".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (self.sends.size > 0) then
		self.sends.each{o |
			ctx.res.append(", ")
			ctx.res.append("sends".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (self.messages.size > 0) then
		self.messages.each{o |
			ctx.res.append(", ")
			ctx.res.append("messages".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (self.connectors.size > 0) then
		self.connectors.each{o |
			ctx.res.append(", ")
			ctx.res.append("connectors".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (self.ports.size > 0) then
		self.ports.each{o |
			ctx.res.append(", ")
			ctx.res.append("ports".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (self.annotations.size > 0) then
		self.annotations.each{o |
			ctx.res.append(", ")
			ctx.res.append("annotations".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
ctx.res.append(")\n")

if not self.behaviour.isVoid then

	self.behaviour.pointcut2droolsPass2(ctx)
end

if self.compositeComponent.size >0 then

	self.compositeComponent.each{c|c.pointcut2droolsPass2(ctx)}
end

if self.properties.size >0 then

	self.properties.each{c|c.pointcut2droolsPass2(ctx)}
end

if self.messages.size >0 then

	self.messages.each{c|c.pointcut2droolsPass2(ctx)}
end

if self.connectors.size >0 then

	self.connectors.each{c|c.pointcut2droolsPass2(ctx)}
end

if self.ports.size >0 then

	self.ports.each{c|c.pointcut2droolsPass2(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass2(ctx)}
end
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.SoftwareComponent" +" "+ na +  " = null;
")	
if not self.behaviour.isVoid then

	self.behaviour.generateDeclare(ctx)
end

if self.compositeComponent.size >0 then

	self.compositeComponent.each{c|c.generateDeclare(ctx)}
end

if self.properties.size >0 then

	self.properties.each{c|c.generateDeclare(ctx)}
end

if self.messages.size >0 then

	self.messages.each{c|c.generateDeclare(ctx)}
end

if self.connectors.size >0 then

	self.connectors.each{c|c.generateDeclare(ctx)}
end

if self.ports.size >0 then

	self.ports.each{c|c.generateDeclare(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.generateDeclare(ctx)}
end
end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.SoftwareComponent) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createSoftwareComponent();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.SoftwareComponent) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createSoftwareComponent();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.SoftwareComponent) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createSoftwareComponent();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createSoftwareComponent();
")

if not self.behaviour.isVoid then

	self.behaviour.generatePerJoinPointStrategy(ctx)
end

if self.compositeComponent.size >0 then

	self.compositeComponent.each{c|c.generatePerJoinPointStrategy(ctx)}
end

if self.properties.size >0 then

	self.properties.each{c|c.generatePerJoinPointStrategy(ctx)}
end

if self.messages.size >0 then

	self.messages.each{c|c.generatePerJoinPointStrategy(ctx)}
end

if self.connectors.size >0 then

	self.connectors.each{c|c.generatePerJoinPointStrategy(ctx)}
end

if self.ports.size >0 then

	self.ports.each{c|c.generatePerJoinPointStrategy(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.generatePerJoinPointStrategy(ctx)}
end
end

}aspect class Device {
method  pass2set(ctx:Context):Void is do 
 		if (not self.partial.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Partial"+"("+self.partial.toString+");
")	
	end
	if (not self.singleton.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Singleton"+"("+self.singleton.toString+");
")	
	end
	if (not self.name.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Name"+"(\""+self.name.toString+"\");
")	
	end

	self.compositeComponent.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"CompositeComponent"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



	self.properties.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Properties"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



	self.receives.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Receives"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



	self.sends.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Sends"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



	self.messages.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Messages"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



	self.connectors.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Connectors"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



	self.ports.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Ports"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



	self.annotations.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Annotations"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



if self.compositeComponent.size >0 then

	self.compositeComponent.each{c|c.pass2set(ctx)}
end

if self.properties.size >0 then

	self.properties.each{c|c.pass2set(ctx)}
end

if self.messages.size >0 then

	self.messages.each{c|c.pass2set(ctx)}
end

if self.connectors.size >0 then

	self.connectors.each{c|c.pass2set(ctx)}
end

if self.ports.size >0 then

	self.ports.each{c|c.pass2set(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pass2set(ctx)}
end
end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.Device(")
			if (not self.partial.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("partial".replace("~","")+" == "+self.partial.toString)
		i := i+1	
	end
	if (not self.singleton.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("singleton".replace("~","")+" == "+self.singleton.toString)
		i := i+1	
	end
	if (not self.name.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("name".replace("~","")+ctx.convert(self.name.toString))
		i := i+1	
	end
ctx.res.append(")\n")

if self.compositeComponent.size >0 then

	self.compositeComponent.each{c|c.pointcut2droolsPass1(ctx)}
end

if self.properties.size >0 then

	self.properties.each{c|c.pointcut2droolsPass1(ctx)}
end

if self.messages.size >0 then

	self.messages.each{c|c.pointcut2droolsPass1(ctx)}
end

if self.connectors.size >0 then

	self.connectors.each{c|c.pointcut2droolsPass1(ctx)}
end

if self.ports.size >0 then

	self.ports.each{c|c.pointcut2droolsPass1(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass1(ctx)}
end
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.Device(")
		ctx.res.append("this == "+varName+"Decl")
			if (self.compositeComponent.size > 0) then
		self.compositeComponent.each{o |
			ctx.res.append(", ")
			ctx.res.append("compositeComponent".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (self.properties.size > 0) then
		self.properties.each{o |
			ctx.res.append(", ")
			ctx.res.append("properties".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (self.receives.size > 0) then
		self.receives.each{o |
			ctx.res.append(", ")
			ctx.res.append("receives".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (self.sends.size > 0) then
		self.sends.each{o |
			ctx.res.append(", ")
			ctx.res.append("sends".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (self.messages.size > 0) then
		self.messages.each{o |
			ctx.res.append(", ")
			ctx.res.append("messages".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (self.connectors.size > 0) then
		self.connectors.each{o |
			ctx.res.append(", ")
			ctx.res.append("connectors".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (self.ports.size > 0) then
		self.ports.each{o |
			ctx.res.append(", ")
			ctx.res.append("ports".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (self.annotations.size > 0) then
		self.annotations.each{o |
			ctx.res.append(", ")
			ctx.res.append("annotations".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
ctx.res.append(")\n")

if self.compositeComponent.size >0 then

	self.compositeComponent.each{c|c.pointcut2droolsPass2(ctx)}
end

if self.properties.size >0 then

	self.properties.each{c|c.pointcut2droolsPass2(ctx)}
end

if self.messages.size >0 then

	self.messages.each{c|c.pointcut2droolsPass2(ctx)}
end

if self.connectors.size >0 then

	self.connectors.each{c|c.pointcut2droolsPass2(ctx)}
end

if self.ports.size >0 then

	self.ports.each{c|c.pointcut2droolsPass2(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass2(ctx)}
end
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.Device" +" "+ na +  " = null;
")	
if self.compositeComponent.size >0 then

	self.compositeComponent.each{c|c.generateDeclare(ctx)}
end

if self.properties.size >0 then

	self.properties.each{c|c.generateDeclare(ctx)}
end

if self.messages.size >0 then

	self.messages.each{c|c.generateDeclare(ctx)}
end

if self.connectors.size >0 then

	self.connectors.each{c|c.generateDeclare(ctx)}
end

if self.ports.size >0 then

	self.ports.each{c|c.generateDeclare(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.generateDeclare(ctx)}
end
end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.Device) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createDevice();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.Device) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createDevice();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.Device) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createDevice();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createDevice();
")

if self.compositeComponent.size >0 then

	self.compositeComponent.each{c|c.generatePerJoinPointStrategy(ctx)}
end

if self.properties.size >0 then

	self.properties.each{c|c.generatePerJoinPointStrategy(ctx)}
end

if self.messages.size >0 then

	self.messages.each{c|c.generatePerJoinPointStrategy(ctx)}
end

if self.connectors.size >0 then

	self.connectors.each{c|c.generatePerJoinPointStrategy(ctx)}
end

if self.ports.size >0 then

	self.ports.each{c|c.generatePerJoinPointStrategy(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.generatePerJoinPointStrategy(ctx)}
end
end

}aspect class Event {
method  pass2set(ctx:Context):Void is do 
 	end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.Event(")
		ctx.res.append(")\n")
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.Event(")
		ctx.res.append("this == "+varName+"Decl")
		ctx.res.append(")\n")
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.Event" +" "+ na +  " = null;
")	end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.Event) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createEvent();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.Event) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createEvent();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.Event) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createEvent();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createEvent();
")
end

}aspect class ReceiveMessage {
method  pass2set(ctx:Context):Void is do 
 		if (not self.device.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Device"+"("+ctx.cache.getValue(self.device)+");
")	
	end
	if (not self.message.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Message"+"("+ctx.cache.getValue(self.message)+");
")	
	end

if not self.device.isVoid then

	self.device.pass2set(ctx)
end
end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.ReceiveMessage(")
		ctx.res.append(")\n")

if not self.device.isVoid then

	self.device.pointcut2droolsPass1(ctx)
end
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.ReceiveMessage(")
		ctx.res.append("this == "+varName+"Decl")
			if (not self.device.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("device".replace("~","")+" == "+ctx.cache.getValue(self.device)+"Decl")
	end
	if (not self.message.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("message".replace("~","")+" == "+ctx.cache.getValue(self.message)+"Decl")
	end
ctx.res.append(")\n")

if not self.device.isVoid then

	self.device.pointcut2droolsPass2(ctx)
end
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.ReceiveMessage" +" "+ na +  " = null;
")	
if not self.device.isVoid then

	self.device.generateDeclare(ctx)
end
end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.ReceiveMessage) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createReceiveMessage();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.ReceiveMessage) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createReceiveMessage();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.ReceiveMessage) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createReceiveMessage();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createReceiveMessage();
")

if not self.device.isVoid then

	self.device.generatePerJoinPointStrategy(ctx)
end
end

}aspect class Simulator {
method  pass2set(ctx:Context):Void is do 
 		if (not self.partial.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Partial"+"("+self.partial.toString+");
")	
	end
	if (not self.singleton.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Singleton"+"("+self.singleton.toString+");
")	
	end
	if (not self.name.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Name"+"(\""+self.name.toString+"\");
")	
	end
	if (not self.device.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Device"+"("+ctx.cache.getValue(self.device)+");
")	
	end
	if (not self.behaviour.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Behaviour"+"("+ctx.cache.getValue(self.behaviour)+");
")	
	end

	self.compositeComponent.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"CompositeComponent"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



	self.properties.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Properties"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



	self.receives.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Receives"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



	self.sends.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Sends"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



	self.messages.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Messages"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



	self.connectors.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Connectors"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



	self.ports.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Ports"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



	self.annotations.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Annotations"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



if not self.behaviour.isVoid then

	self.behaviour.pass2set(ctx)
end

if self.compositeComponent.size >0 then

	self.compositeComponent.each{c|c.pass2set(ctx)}
end

if self.properties.size >0 then

	self.properties.each{c|c.pass2set(ctx)}
end

if self.messages.size >0 then

	self.messages.each{c|c.pass2set(ctx)}
end

if self.connectors.size >0 then

	self.connectors.each{c|c.pass2set(ctx)}
end

if self.ports.size >0 then

	self.ports.each{c|c.pass2set(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pass2set(ctx)}
end
end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.Simulator(")
			if (not self.partial.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("partial".replace("~","")+" == "+self.partial.toString)
		i := i+1	
	end
	if (not self.singleton.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("singleton".replace("~","")+" == "+self.singleton.toString)
		i := i+1	
	end
	if (not self.name.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("name".replace("~","")+ctx.convert(self.name.toString))
		i := i+1	
	end
ctx.res.append(")\n")

if not self.behaviour.isVoid then

	self.behaviour.pointcut2droolsPass1(ctx)
end

if self.compositeComponent.size >0 then

	self.compositeComponent.each{c|c.pointcut2droolsPass1(ctx)}
end

if self.properties.size >0 then

	self.properties.each{c|c.pointcut2droolsPass1(ctx)}
end

if self.messages.size >0 then

	self.messages.each{c|c.pointcut2droolsPass1(ctx)}
end

if self.connectors.size >0 then

	self.connectors.each{c|c.pointcut2droolsPass1(ctx)}
end

if self.ports.size >0 then

	self.ports.each{c|c.pointcut2droolsPass1(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass1(ctx)}
end
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.Simulator(")
		ctx.res.append("this == "+varName+"Decl")
			if (not self.device.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("device".replace("~","")+" == "+ctx.cache.getValue(self.device)+"Decl")
	end
	if (not self.behaviour.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("behaviour".replace("~","")+" == "+ctx.cache.getValue(self.behaviour)+"Decl")
	end
	if (self.compositeComponent.size > 0) then
		self.compositeComponent.each{o |
			ctx.res.append(", ")
			ctx.res.append("compositeComponent".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (self.properties.size > 0) then
		self.properties.each{o |
			ctx.res.append(", ")
			ctx.res.append("properties".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (self.receives.size > 0) then
		self.receives.each{o |
			ctx.res.append(", ")
			ctx.res.append("receives".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (self.sends.size > 0) then
		self.sends.each{o |
			ctx.res.append(", ")
			ctx.res.append("sends".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (self.messages.size > 0) then
		self.messages.each{o |
			ctx.res.append(", ")
			ctx.res.append("messages".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (self.connectors.size > 0) then
		self.connectors.each{o |
			ctx.res.append(", ")
			ctx.res.append("connectors".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (self.ports.size > 0) then
		self.ports.each{o |
			ctx.res.append(", ")
			ctx.res.append("ports".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
	if (self.annotations.size > 0) then
		self.annotations.each{o |
			ctx.res.append(", ")
			ctx.res.append("annotations".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
ctx.res.append(")\n")

if not self.behaviour.isVoid then

	self.behaviour.pointcut2droolsPass2(ctx)
end

if self.compositeComponent.size >0 then

	self.compositeComponent.each{c|c.pointcut2droolsPass2(ctx)}
end

if self.properties.size >0 then

	self.properties.each{c|c.pointcut2droolsPass2(ctx)}
end

if self.messages.size >0 then

	self.messages.each{c|c.pointcut2droolsPass2(ctx)}
end

if self.connectors.size >0 then

	self.connectors.each{c|c.pointcut2droolsPass2(ctx)}
end

if self.ports.size >0 then

	self.ports.each{c|c.pointcut2droolsPass2(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass2(ctx)}
end
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.Simulator" +" "+ na +  " = null;
")	
if not self.behaviour.isVoid then

	self.behaviour.generateDeclare(ctx)
end

if self.compositeComponent.size >0 then

	self.compositeComponent.each{c|c.generateDeclare(ctx)}
end

if self.properties.size >0 then

	self.properties.each{c|c.generateDeclare(ctx)}
end

if self.messages.size >0 then

	self.messages.each{c|c.generateDeclare(ctx)}
end

if self.connectors.size >0 then

	self.connectors.each{c|c.generateDeclare(ctx)}
end

if self.ports.size >0 then

	self.ports.each{c|c.generateDeclare(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.generateDeclare(ctx)}
end
end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.Simulator) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createSimulator();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.Simulator) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createSimulator();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.Simulator) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createSimulator();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createSimulator();
")

if not self.behaviour.isVoid then

	self.behaviour.generatePerJoinPointStrategy(ctx)
end

if self.compositeComponent.size >0 then

	self.compositeComponent.each{c|c.generatePerJoinPointStrategy(ctx)}
end

if self.properties.size >0 then

	self.properties.each{c|c.generatePerJoinPointStrategy(ctx)}
end

if self.messages.size >0 then

	self.messages.each{c|c.generatePerJoinPointStrategy(ctx)}
end

if self.connectors.size >0 then

	self.connectors.each{c|c.generatePerJoinPointStrategy(ctx)}
end

if self.ports.size >0 then

	self.ports.each{c|c.generatePerJoinPointStrategy(ctx)}
end

if self.annotations.size >0 then

	self.annotations.each{c|c.generatePerJoinPointStrategy(ctx)}
end
end

}aspect class Dictionary {
method  pass2set(ctx:Context):Void is do 
 		if (not self.changeable.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Changeable"+"("+self.changeable.toString+");
")	
	end
	if (not self.lowerBound.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"LowerBound"+"("+self.lowerBound.toString+");
")	
	end
	if (not self.upperBound.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"UpperBound"+"("+self.upperBound.toString+");
")	
	end
	if (not self.name.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Name"+"(\""+self.name.toString+"\");
")	
	end
	if (not self.indexType.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"IndexType"+"("+ctx.cache.getValue(self.indexType)+");
")	
	end
	if (not self.type.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Type"+"("+ctx.cache.getValue(self.type)+");
")	
	end

	self.annotations.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Annotations"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



if self.annotations.size >0 then

	self.annotations.each{c|c.pass2set(ctx)}
end
end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.Dictionary(")
			if (not self.changeable.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("changeable".replace("~","")+" == "+self.changeable.toString)
		i := i+1	
	end
	if (not self.lowerBound.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("lowerBound".replace("~","")+" == "+self.lowerBound.toString)
		i := i+1	
	end
	if (not self.upperBound.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("upperBound".replace("~","")+" == "+self.upperBound.toString)
		i := i+1	
	end
	if (not self.name.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("name".replace("~","")+ctx.convert(self.name.toString))
		i := i+1	
	end
ctx.res.append(")\n")

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass1(ctx)}
end
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.Dictionary(")
		ctx.res.append("this == "+varName+"Decl")
			if (not self.indexType.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("indexType".replace("~","")+" == "+ctx.cache.getValue(self.indexType)+"Decl")
	end
	if (not self.type.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("type".replace("~","")+" == "+ctx.cache.getValue(self.type)+"Decl")
	end
	if (self.annotations.size > 0) then
		self.annotations.each{o |
			ctx.res.append(", ")
			ctx.res.append("annotations".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
ctx.res.append(")\n")

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass2(ctx)}
end
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.Dictionary" +" "+ na +  " = null;
")	
if self.annotations.size >0 then

	self.annotations.each{c|c.generateDeclare(ctx)}
end
end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.Dictionary) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createDictionary();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.Dictionary) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createDictionary();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.Dictionary) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createDictionary();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createDictionary();
")

if self.annotations.size >0 then

	self.annotations.each{c|c.generatePerJoinPointStrategy(ctx)}
end
end

}aspect class ComponentReference {
method  pass2set(ctx:Context):Void is do 
 		if (not self.component.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Component"+"("+ctx.cache.getValue(self.component)+");
")	
	end

	self.~propertyNavigations.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"PropertyNavigations"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



if self.~propertyNavigations.size >0 then

	self.~propertyNavigations.each{c|c.pass2set(ctx)}
end
end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.ComponentReference(")
		ctx.res.append(")\n")

if self.~propertyNavigations.size >0 then

	self.~propertyNavigations.each{c|c.pointcut2droolsPass1(ctx)}
end
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.ComponentReference(")
		ctx.res.append("this == "+varName+"Decl")
			if (not self.component.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("component".replace("~","")+" == "+ctx.cache.getValue(self.component)+"Decl")
	end
	if (self.~propertyNavigations.size > 0) then
		self.~propertyNavigations.each{o |
			ctx.res.append(", ")
			ctx.res.append("~propertyNavigations".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
ctx.res.append(")\n")

if self.~propertyNavigations.size >0 then

	self.~propertyNavigations.each{c|c.pointcut2droolsPass2(ctx)}
end
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.ComponentReference" +" "+ na +  " = null;
")	
if self.~propertyNavigations.size >0 then

	self.~propertyNavigations.each{c|c.generateDeclare(ctx)}
end
end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.ComponentReference) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createComponentReference();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.ComponentReference) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createComponentReference();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.ComponentReference) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createComponentReference();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createComponentReference();
")

if self.~propertyNavigations.size >0 then

	self.~propertyNavigations.each{c|c.generatePerJoinPointStrategy(ctx)}
end
end

}aspect class PropertyNavigation {
method  pass2set(ctx:Context):Void is do 
 		if (not self.~property.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Property"+"("+ctx.cache.getValue(self.~property)+");
")	
	end
end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.PropertyNavigation(")
		ctx.res.append(")\n")
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.PropertyNavigation(")
		ctx.res.append("this == "+varName+"Decl")
			if (not self.~property.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("~property".replace("~","")+" == "+ctx.cache.getValue(self.~property)+"Decl")
	end
ctx.res.append(")\n")
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.PropertyNavigation" +" "+ na +  " = null;
")	end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.PropertyNavigation) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createPropertyNavigation();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.PropertyNavigation) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createPropertyNavigation();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.PropertyNavigation) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createPropertyNavigation();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createPropertyNavigation();
")
end

}aspect class DictionaryNavigation {
method  pass2set(ctx:Context):Void is do 
 		if (not self.index.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Index"+"("+ctx.cache.getValue(self.index)+");
")	
	end
	if (not self.~property.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Property"+"("+ctx.cache.getValue(self.~property)+");
")	
	end

if not self.index.isVoid then

	self.index.pass2set(ctx)
end
end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.DictionaryNavigation(")
		ctx.res.append(")\n")

if not self.index.isVoid then

	self.index.pointcut2droolsPass1(ctx)
end
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.DictionaryNavigation(")
		ctx.res.append("this == "+varName+"Decl")
			if (not self.index.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("index".replace("~","")+" == "+ctx.cache.getValue(self.index)+"Decl")
	end
	if (not self.~property.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("~property".replace("~","")+" == "+ctx.cache.getValue(self.~property)+"Decl")
	end
ctx.res.append(")\n")

if not self.index.isVoid then

	self.index.pointcut2droolsPass2(ctx)
end
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.DictionaryNavigation" +" "+ na +  " = null;
")	
if not self.index.isVoid then

	self.index.generateDeclare(ctx)
end
end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.DictionaryNavigation) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createDictionaryNavigation();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.DictionaryNavigation) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createDictionaryNavigation();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.DictionaryNavigation) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createDictionaryNavigation();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createDictionaryNavigation();
")

if not self.index.isVoid then

	self.index.generatePerJoinPointStrategy(ctx)
end
end

}aspect class Connector {
method  pass2set(ctx:Context):Void is do 
 		if (not self.name.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Name"+"(\""+self.name.toString+"\");
")	
	end
	if (not self.owner.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Owner"+"("+ctx.cache.getValue(self.owner)+");
")	
	end
	if (not self.port1.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Port1"+"("+ctx.cache.getValue(self.port1)+");
")	
	end
	if (not self.port2.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Port2"+"("+ctx.cache.getValue(self.port2)+");
")	
	end
	if (not self.prop1.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Prop1"+"("+ctx.cache.getValue(self.prop1)+");
")	
	end
	if (not self.prop2.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Prop2"+"("+ctx.cache.getValue(self.prop2)+");
")	
	end

	self.annotations.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Annotations"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



if self.annotations.size >0 then

	self.annotations.each{c|c.pass2set(ctx)}
end
end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.Connector(")
			if (not self.name.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("name".replace("~","")+ctx.convert(self.name.toString))
		i := i+1	
	end
ctx.res.append(")\n")

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass1(ctx)}
end
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.Connector(")
		ctx.res.append("this == "+varName+"Decl")
			if (not self.owner.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("owner".replace("~","")+" == "+ctx.cache.getValue(self.owner)+"Decl")
	end
	if (not self.port1.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("port1".replace("~","")+" == "+ctx.cache.getValue(self.port1)+"Decl")
	end
	if (not self.port2.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("port2".replace("~","")+" == "+ctx.cache.getValue(self.port2)+"Decl")
	end
	if (not self.prop1.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("prop1".replace("~","")+" == "+ctx.cache.getValue(self.prop1)+"Decl")
	end
	if (not self.prop2.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("prop2".replace("~","")+" == "+ctx.cache.getValue(self.prop2)+"Decl")
	end
	if (self.annotations.size > 0) then
		self.annotations.each{o |
			ctx.res.append(", ")
			ctx.res.append("annotations".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
ctx.res.append(")\n")

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass2(ctx)}
end
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.Connector" +" "+ na +  " = null;
")	
if self.annotations.size >0 then

	self.annotations.each{c|c.generateDeclare(ctx)}
end
end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.Connector) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createConnector();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.Connector) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createConnector();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.Connector) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createConnector();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createConnector();
")

if self.annotations.size >0 then

	self.annotations.each{c|c.generatePerJoinPointStrategy(ctx)}
end
end

}aspect class Port {
method  pass2set(ctx:Context):Void is do 
 		if (not self.name.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Name"+"(\""+self.name.toString+"\");
")	
	end
	if (not self.owner.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Owner"+"("+ctx.cache.getValue(self.owner)+");
")	
	end

	self.annotations.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Annotations"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



if self.annotations.size >0 then

	self.annotations.each{c|c.pass2set(ctx)}
end
end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.Port(")
			if (not self.name.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("name".replace("~","")+ctx.convert(self.name.toString))
		i := i+1	
	end
ctx.res.append(")\n")

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass1(ctx)}
end
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.Port(")
		ctx.res.append("this == "+varName+"Decl")
			if (not self.owner.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("owner".replace("~","")+" == "+ctx.cache.getValue(self.owner)+"Decl")
	end
	if (self.annotations.size > 0) then
		self.annotations.each{o |
			ctx.res.append(", ")
			ctx.res.append("annotations".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
ctx.res.append(")\n")

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass2(ctx)}
end
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.Port" +" "+ na +  " = null;
")	
if self.annotations.size >0 then

	self.annotations.each{c|c.generateDeclare(ctx)}
end
end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.Port) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createPort();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.Port) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createPort();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.Port) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createPort();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createPort();
")

if self.annotations.size >0 then

	self.annotations.each{c|c.generatePerJoinPointStrategy(ctx)}
end
end

}aspect class CreateAction {
method  pass2set(ctx:Context):Void is do 
 		if (not self.name.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Name"+"(\""+self.name.toString+"\");
")	
	end
	if (not self.ref.isVoid()) then
		ctx.res.append(ctx.cache.getValue(self) + ".set"+"Ref"+"("+ctx.cache.getValue(self.ref)+");
")	
	end

	self.annotations.each{c|
	ctx.res.append(ctx.cache.getValue(self) + ".get"+"Annotations"+"().add("+ctx.cache.getValue(c)+");
")	
	}	



if not self.ref.isVoid then

	self.ref.pass2set(ctx)
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pass2set(ctx)}
end
end
method  pointcut2droolsPass1(ctx:Context):Void is do 
 			var i : Integer init 0
		var varName : String init ctx.getGenerateName(self)
		ctx.cache.put(self,"$"+varName)
		ctx.res.append("$"+varName+"Decl: "+"edap.CreateAction(")
			if (not self.name.isVoid()) then
		if i > 0 then
			ctx.res.append(", ")
		end
		ctx.res.append("name".replace("~","")+ctx.convert(self.name.toString))
		i := i+1	
	end
ctx.res.append(")\n")

if not self.ref.isVoid then

	self.ref.pointcut2droolsPass1(ctx)
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass1(ctx)}
end
end
method  pointcut2droolsPass2(ctx:Context):Void is do 
 			var varName : String init ctx.cache.getValue(self)
		ctx.res.append(varName+": edap.CreateAction(")
		ctx.res.append("this == "+varName+"Decl")
			if (not self.ref.isVoid()) then
		ctx.res.append(", ")
		ctx.res.append("ref".replace("~","")+" == "+ctx.cache.getValue(self.ref)+"Decl")
	end
	if (self.annotations.size > 0) then
		self.annotations.each{o |
			ctx.res.append(", ")
			ctx.res.append("annotations".replace("~","")+" contains "+ctx.cache.getValue(o)+"Decl")
		}
	end
ctx.res.append(")\n")

if not self.ref.isVoid then

	self.ref.pointcut2droolsPass2(ctx)
end

if self.annotations.size >0 then

	self.annotations.each{c|c.pointcut2droolsPass2(ctx)}
end
end
method  generateDeclare(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
	ctx.res.append("edap.CreateAction" +" "+ na +  " = null;
")	
if not self.ref.isVoid then

	self.ref.generateDeclare(ctx)
end

if self.annotations.size >0 then

	self.annotations.each{c|c.generateDeclare(ctx)}
end
end
method  generateGlobalStrategy(ctx:Context):Void is do 
 		var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.CreateAction) uniqueobjects.get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createCreateAction();
")
	ctx.res.append("	uniqueobjects.put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerElementStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Set<Object> "+scopeName+" = new java.util.HashSet<Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".add("+id+");
")
	}
			
	ctx.res.append("if (perElem.get("+scopeName+") == null){
")
	ctx.res.append("	perElem.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)
	ctx.res.append(na +  " = (edap.CreateAction) ((java.util.Map<String, Object>) perElem.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createCreateAction();
")
	ctx.res.append("	((java.util.Map<String, Object>)perElem.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")	
	end
method  generatePerRoleStrategy(ctx:Context, baseIDs:Set<String>):Void is do 
 		var scopeName : String init "scope_"+ctx.getGenerateName(self)
	ctx.res.append("java.util.Map<String, Object> "+scopeName+" = new java.util.HashMap<String, Object>();
")
	baseIDs.each{id | 
		ctx.res.append(scopeName+".put(\""+id+"\", "+id+");
")
	}
			
	ctx.res.append("if (perRole.get("+scopeName+") == null){
")
	ctx.res.append("	perRole.put("+scopeName+", new java.util.HashMap<String, Object>());
")
	ctx.res.append("}
")

	var na : String init ctx.cache.getValue(self)				
	ctx.res.append(na +  " = (edap.CreateAction) ((java.util.Map<String, Object>) perRole.get("+scopeName+")).get(\""+na+"\");
")
	ctx.res.append("if ("+" "+ na + " " + "== null){
")
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createCreateAction();
")
	ctx.res.append("	((java.util.Map<String, Object>) perRole.get("+scopeName+")).put(\""+na+"\","+ na+");
")
	ctx.res.append("}
")
	end
method  generatePerJoinPointStrategy(ctx:Context):Void is do 
 		var na : String init ctx.getGenerateName(self)
 	ctx.cache.put(self,na)
 	ctx.res.append("if ("+na+" == null)
")	
	ctx.res.append("	"+na +  " = edap.EdapFactory.eINSTANCE.createCreateAction();
")

if not self.ref.isVoid then

	self.ref.generatePerJoinPointStrategy(ctx)
end

if self.annotations.size >0 then

	self.annotations.each{c|c.generatePerJoinPointStrategy(ctx)}
end
end

}