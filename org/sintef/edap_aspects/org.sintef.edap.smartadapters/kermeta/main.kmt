
/* $Id:$ 
 * Creation : February 9, 2010
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            barais
 */
@mainClass "smartadapters4MODERATES::Main"
@mainOperation "main"


package smartadapters4MODERATES;


require kermeta
require "s0.kmt"
require "adaptationsGenerator.kmt"

using kermeta::standard
using kermeta::persistence

using edap
using smartadapters4MODERATES


class Main {

	operation initialize():Context is do
		var ctx : Context init Context.new
		ctx.res := kermeta::utils::StringBuffer.new
		ctx.cache := kermeta::utils::Hashtable<Object,String>.new		
		result:=ctx		
	end
	
	
	
	operation main(uri:String) : Void is do
		var ctx : Context init self.initialize()
		var rep : EMFRepository  init EMFRepository.new
		var res : EMFResource 
		res ?= rep.createResource(uri, "platform:/resource/org.sintef.edap.smartadapters/metamodel/Edap_AOM_Framework.ecore")
		res.load
		var asp : Aspect 
		asp ?= res.one()
		
		ctx.res.append("global java.util.Map uniqueobjects;\n")
		ctx.res.append("global java.util.Map perRole;\n")
		ctx.res.append("global java.util.Map perElem;\n")
		ctx.res.append("Rule \"Aspect\"\n")
		ctx.res.append("when\n")
		
		asp.pointcut.content.each{o | o.pointcut2droolsPass1(ctx)}
		ctx.res.append("\n")
		asp.pointcut.content.each{o | o.pointcut2droolsPass2(ctx)}
		
		ctx.res.append("\nthen\n\n")
		
		asp.advice.content.each{o | o.generateDeclare(ctx)}
		ctx.res.append("\n")
		asp.strategies.each{s | s.generate(ctx)}
		ctx.res.append("\n")
		asp.advice.content.each{o | o.generatePerJoinPointStrategy(ctx)}
		ctx.res.append("\n")		
		asp.advice.content.each{o | o.pass2set(ctx)}
		ctx.res.append("\n")
		
		
		
		var ctxadaptation : smartadapters4MODERATES::adaptations::Context init smartadapters4MODERATES::adaptations::Context.new
		ctxadaptation.res := kermeta::utils::StringBuffer.new
		ctxadaptation.cache := kermeta::utils::Hashtable<Object,String>.new		
		
		ctx.cache.keys().each{key| ctxadaptation.cache.put(key,ctx.cache.getValue(key))}
		asp.adapt.each{a| a.toDrools(ctxadaptation)} 
		
		ctx.res.append(ctxadaptation.res.toString)
		
		
		
		ctx.res.append("end")
		
		stdio.writeln(ctx.res.toString) 
	end
}

aspect class InstantiationStrategy {
	operation generate(ctx : Context) : Void is
		abstract
}

aspect class GlobalInstantiation {
	method generate(ctx : Context) : Void is
	do	
		adviceElements.each{elt |
			elt.generateGlobalStrategy(ctx)		
		}
	end
}

aspect class PerElementMatch {
	method generate(ctx : Context) : Void is
	do	
		var ids : Set<String> init Set<String>.new
		self.pointcutElements.each{ elt |
			var id : String init ctx.getGenerateName(elt)
			ctx.cache.put(elt,id)
			ids.add(id)
		}
		
		adviceElements.each{elt |
			elt.generatePerElementStrategy(ctx, ids)		
		}
	end
}

aspect class PerRoleMatch {
	method generate(ctx : Context) : Void is
	do	
		var ids : Set<String> init Set<String>.new
		self.pointcutElements.each{ elt |
			var id : String init ctx.getGenerateName(elt)
			ctx.cache.put(elt,id)
			ids.add(id)
		}
		adviceElements.each{elt |
			elt.generatePerRoleStrategy(ctx, ids)		
		}
	end
}