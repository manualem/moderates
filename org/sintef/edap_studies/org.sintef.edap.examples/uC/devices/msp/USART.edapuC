edap "../USART.edap"

device USART {

	property usart_freq = "9600" // Fixed in the template for now
	property buffer_size = "32" // Size of the reception buffer
	property terminator = "\\n" // Message terminator
	property append_terminator = "true" // append the terminator to messages to transmit

global 
<generator>
aspect class UCDevice {
	
	property readonly usart_freq : String 
		getter is do
			result := "9600" // by default
			var a : StaticProperty init properties.detect{p| p.name == "usart_freq"}
			if a != void then
				result := a.~value
			end
		end
		
	property readonly buffer_size : String 
		getter is do
			result := "32" // by default
			var a : StaticProperty init properties.detect{p| p.name == "buffer_size"}
			if a != void then
				result := a.~value
			end
		end
	
	property readonly terminator : String 
		getter is do
			result := "\\n" // by default
			var a : StaticProperty init properties.detect{p| p.name == "terminator"}
			if a != void then
				result := a.~value
			end
		end
	
	property readonly append_terminator : Boolean 
		getter is do
			result := false
			var a : StaticProperty init properties.detect{p| p.name == "append_terminator"}
			if a != void then
				result := a.~value == "true"
			end
		end
}
</generator>
<template>
#include <signal.h>

//-----------------------------------------------------------------------------
// Implementation of the FIFO buffer for received characters
//-----------------------------------------------------------------------------

#define USART_BUFFER_SIZE 32

volatile char usart_buffer[USART_BUFFER_SIZE]; // circular buffer fifo
volatile int usart_buffer_front = 0;
volatile int usart_buffer_tail = 0;

int usart_buffer_empty() {
	if (usart_buffer_front == usart_buffer_tail) return 1;
	else return 0;
}

int usart_buffer_full() {
	if ( (usart_buffer_tail + 1) % USART_BUFFER_SIZE == usart_buffer_front ) return 1;
	else return 0;
}

void usart_buffer_queue(char c) {
	if (!usart_buffer_full()) {
		usart_buffer[usart_buffer_tail] = c;
		usart_buffer_tail = (usart_buffer_tail + 1) % USART_BUFFER_SIZE;
	}
}

char usart_buffer_dequeue() {
	char result = 0;
	if (!usart_buffer_empty()) {
		result = usart_buffer[usart_buffer_front];
		usart_buffer_front = (usart_buffer_front + 1) % USART_BUFFER_SIZE;
	}
	return result;
}

//-----------------------------------------------------------------------------
// Implementation of the USART interupt routine (Enqueue received characters)
//-----------------------------------------------------------------------------

interrupt (USCIAB0RX_VECTOR) USCI0RX_ISR(void)
{
	volatile char c = UCA0RXBUF;
	usart_buffer_queue(c);
}
</template>

init 
<template>
 	P3SEL = 0x30;                             // P3.4,5 = USCI_A0 TXD/RXD
	UCA0CTL1 |= UCSSEL_2;                     // SMCLK
	
	//UCA0BR0 = 104;                            // 1MHz 9600
	//UCA0BR1 = 0;                              // 1MHz 9600
	
	UCA0BR0   = 0x41;     					  // 9600 from 8Mhz
    UCA0BR1   = 0x3;
	
	UCA0MCTL = UCBRS0;                        // Modulation UCBRSx = 1
	UCA0CTL1 &= ~UCSWRST;                     // **Initialize USCI state machine**
	IE2 |= UCA0RXIE;                          // Enable USCI_A0 RX interrupt
	// __bis_SR_register(LPM0_bits + GIE);       // Enter LPM0, interrupts enabled
</template>

poll
<template>
while (!usart_buffer_empty()) {
	USART_receive_receive_byte(usart_buffer_dequeue());
}
</template>

message transmit {
send <template>
	int i = 0;
	while (msg[i] != 0) {
 		UCA0TXBUF = msg[i];
 		while (!(IFG2&UCA0TXIFG));                // USCI_A0 TX buffer ready?
 		i++;
 	}
 	<%if d.append_terminator then%>UCA0TXBUF = '<%=d.terminator%>';
 	while (!(IFG2&UCA0TXIFG));<%end%>
</template>
}

message transmit_byte {
send <template>
	UCA0TXBUF = b;
	while (!(IFG2&UCA0TXIFG)); // USCI_A0 TX buffer ready?
</template>
}

message transmit_Hex8 {
send <template>
	static const char hex[] = "0123456789ABCDEF";
	USART_send_transmit_byte( hex[(value>>4) & 0x0f] );
	USART_send_transmit_byte( hex[value & 0x0f] );
</template>
}

message transmit_hexdump {
send <template>
	#define	DEBUGDUMPLINELENGTH	16
	uint8_t offs = 0;
	while(len>0) {
		USART_send_transmit_Hex8( offs );
		USART_send_transmit(": ");
		int llen = (len>DEBUGDUMPLINELENGTH) ? DEBUGDUMPLINELENGTH : len;
		const char* lptr = ptr;
		for( ; llen>0; --llen, ++lptr ) {
			USART_send_transmit_Hex8( *lptr );
			USART_send_transmit_byte( ' ' );
		}
		llen = (len<DEBUGDUMPLINELENGTH) ? DEBUGDUMPLINELENGTH-len : 0;
		for( ; llen>0; --llen )
			USART_send_transmit("   ");
		llen = (len>DEBUGDUMPLINELENGTH) ? DEBUGDUMPLINELENGTH : len;
		for( ; llen>0; --llen, --len, ++ptr ) {
			char c = *ptr;
			USART_send_transmit_byte( (c>=' ' && c<127) ? c : '.' );
		}
		USART_send_transmit_byte('\\n');
		offs += DEBUGDUMPLINELENGTH;
	}
</template>
}
}
