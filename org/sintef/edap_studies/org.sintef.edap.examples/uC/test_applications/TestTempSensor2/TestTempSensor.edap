import "../../devices/Led.edap"
import "../../devices/Timer.edap"
import "../../devices/MSP430Sensor.edap"
import "../../devices/Button.edap"

/* 
Simple application which uses the temperature sensor and lights up
the red led if the temperature is above a threshold (by default 27 °C).
Green LED blinks when the temperature is sampled
The temperature threshold and the delay between mesures can be 
adjusted with the button.
Push the button to enter the SET mode (both LEDs should be blinking).
Push the button again to set the threshold to the current temperature and
Keep the button pushed for the duration of the desired delay. LEDs should
blink alternatively until button is released, the application then returns
to normal mode.
*/

component TestTempSensor {

	// Define the devices used by the application
	property leds : LED[2..2]
	property timers : Timer[2..2]
	property sensor : MSP430Sensor[1..1]
	property button : Button[1..1]

	// Behaviour of the application
	statechart TestTempSensor init RUNNING {
	
		property ref_temperature : Integer
		property delay : Integer
		property delay_counter : Integer
		
		composite state RUNNING init IDLE {
	
			transition press -> SET_TEMP {
				event Button#press
				action {
					send Timer.cancel('1')
					send LED.light_on('1')
					send LED.light_on('2')
				}
			}
	
			state IDLE {
			
				on entry send Timer.start('1', 'delay')
				
				transition timeout -> WaitingForSensor {
					event Timer#timeout
					guard 'timer_id == 1'
					action send MSP430Sensor.mesure_temperature()
				}
			} // IDLE
			
			state WaitingForSensor { 
			
				// Light up the green LED in this state
				on entry send LED.light_on('2')
				on exit send LED.light_off('2')
			
				transition temperature_updated -> IDLE {
					event MSP430Sensor#temperature_value
					action {
						// light up LED 2 if the temp is > 27°C
						'if (v > ref_temperature)' send LED.light_on('1')
						'else' send LED.light_off('1')
					}
				}
			} //WaitingForSensor
		}
		
		state SET_TEMP {
			
			on entry send Timer.start('1', '10')
		
			transition blink -> SET_TEMP {
				event Timer#timeout
				guard 'timer_id == 1'
				action {
					send LED.toggle('1')
					send LED.toggle('2')
				}
			}
			transition press -> SET_TEMP {
				event Button#press
				action send MSP430Sensor.mesure_temperature()
			}
			transition reference_temp -> SET_DELAY {
					event MSP430Sensor#temperature_value
					action {
						'ref_temperature = v;'
						send Timer.cancel('1')
						send LED.light_on('1')
						send LED.light_off('2')
						'delay_counter = 0;'
					}
				}
		}
		
		state SET_DELAY {
	
			on entry send Timer.start('1', '10')
			
				transition count -> SET_DELAY {
					event Timer#timeout
					guard 'timer_id == 1'
					action {
						send Timer.cancel('1')
						send LED.toggle('1')
						send LED.toggle('2')
						'delay_counter++;'
					}
				}
			
			transition release -> RUNNING {
				event Button#release
				action {
					'delay = delay_counter*10;'
					send Timer.cancel('1')
					send LED.light_off('1')
					send LED.light_off('2')
				} 
			}
		}
				
	} // statechart
}
