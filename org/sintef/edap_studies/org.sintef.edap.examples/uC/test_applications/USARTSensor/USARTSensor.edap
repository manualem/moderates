import "../../devices/Led.edap"
import "../../devices/Timer.edap"
import "../../devices/USART.edap"
import "../../devices/MSP430Sensor.edap"


component USARTSensor {

	// Define the devices used by the application
	property leds : LED[2..2]
	property sensor : MSP430Sensor[1..1]
	property timers : Timer[2..2]
	property usart : USART[1..1]

	// Behaviour of the application
	statechart USARTSensor init INIT {
	
		state INIT {
			on entry { 
				send Timer.start('1', '10000')
				send LED.light_on('1')
				send LED.light_on('2')
				send USART.transmit('"Initializing sensor..."')
			}
			
			transition run -> Running {
				event Timer#timeout
				guard 'timer_id == 1'
				action {
					send LED.light_off('1')
					send LED.light_on('2')
				}
			}
		}
	
		composite state Running init WaitForCmd {
			
			transition reset -> INIT {
				event USART#receive_byte
				guard 'b == \'r\''
				action send USART.transmit('"Reset!"')
			}
			
			state WaitForCmd {
			
				on entry {
					send USART.transmit('"\nWaiting for command (h = help)"')
					send LED.light_off('1')
				}
				
				// The red LED is on when the sensor is busy
				on exit send LED.light_on('1') 
				
				transition help -> WaitForCmd {
					event USART#receive_byte
					guard 'b == \'h\''
					action { 
						send USART.transmit('"t - Retrive Temperature"')
						send USART.transmit('"v - Retrive Voltage"')
						send USART.transmit('"h - Show Command List"')
						send USART.transmit('"r - Reset Sensor"')
					}
				}
				
				transition temperature -> MesureTemperature {
					event USART#receive_byte
					guard 'b == \'t\''
				}
				
				transition voltage -> MesureVoltage {
					event USART#receive_byte
					guard 'b == \'v\''
				}
			}
			
			state MesureTemperature {
				on entry send MSP430Sensor.mesure_temperature()
				
				transition printTemp -> WaitForCmd {
					event MSP430Sensor#temperature_value
					action {
						'char outbuf[10];'
						'int10_to_ascii(v,"T=", outbuf);'
						send USART.transmit('outbuf')
					}
				}
			}
			
			state MesureVoltage {
				on entry send MSP430Sensor.mesure_voltage()
				
				transition printTemp -> WaitForCmd {
					event MSP430Sensor#voltage_value
					action {
						'char outbuf[10];'
						'int10_to_ascii(v,"V=", outbuf);'
						send USART.transmit('outbuf')
					}
				}
			}
		}
	}
}
