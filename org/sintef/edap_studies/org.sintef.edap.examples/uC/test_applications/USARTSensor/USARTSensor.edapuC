import "../../devices/msp/MSP430Sensor.edapuC"
import "../../devices/msp/Led.edapuC"
import "../../devices/msp/Timer.edapuC"
import "../../devices/msp/USART.edapuC"

edap "USARTSensor.edap"

application USARTSensor {

headers <template>
#include  "msp430x22x4.h"
#include <signal.h>
#include <stdlib.h>
#include <string.h>
</template>

init <template>
	int i;
	// Stop watchdog timer
	WDTCTL = WDTPW + WDTHOLD;
	
	// Set the clock
	BCSCTL1 = CALBC1_8MHZ;
	DCOCTL = CALDCO_8MHZ;
	BCSCTL3 |= LFXT1S_2;

</template>

poll <template>
	// some sort of polling delay
	for(i=50000; i>0; i--) __no_operation();
</template>

global <template>
// convert a integer which is representing a float times 10 into a string
// e.g 674 becomes "67.4" (the integer may not be larger that 10000)
void int10_to_ascii(int inum,const char *prefixstr,char *outbuf){
	unsigned char i,l,j,minus;
	char chbuf[7];
	minus=0;
	j=0;
	if (inum<0){
		minus=1;
		inum=inum * -1;
	}
	while(inum>9 && j<7){
		// zero is ascii 48:
		chbuf[j]=(char)48+ inum-((inum/10)*10);
		inum=inum/10;
		j++;
	}
	chbuf[j]=(char)48+inum; // most significant digit
	// now reverse the order in outbuf and put a "." in there
	i=0;
	l=0;
	while(prefixstr[i]){
		outbuf[i]=prefixstr[i];
		i++;
	}
	if(minus){
		outbuf[i]='-';
		i++;
	}
	while(j>0){
		outbuf[i]=chbuf[j];
		j--;
		i++;
		l++;
	}
	// inum is less than 10, should be something like "0.inum"
	if (l==0){
		outbuf[i]='0';
		i++;
	}
	outbuf[i]='.';
	i++;
	outbuf[i]=chbuf[j];
	i++;
	outbuf[i]='\0';
}
</template>

}
