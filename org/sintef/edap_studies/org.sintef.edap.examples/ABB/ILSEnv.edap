import "types.edap"
import "mainsignal3.edap"
import "train.edap"
import "trackcircuit.edap"


component ILSEnv
	@Composite "" 
	@Main "" 
	@Gui ""
	{
	port ilsIn
	port ilsOut 
	
	connector (ilsIn, io_ioIn) // to IOController
	connector (io_ioOut, ilsOut) // from IOController
	connector (io_toeo, ms3_ms3In) // to MainSignal3
	connector (ms3_ms3Out, io_fromeo) // frmo MainSignal3
	connector (io_toTrain, trains_trainIn) // to trains
	connector (trains_trainOut, io_fromTrain) // from trains
	connector (io_toeo, tcs_tcIn) // to track circuits
	connector (tcs_tcOut, io_fromeo) // from track circuits				
				
	property io : IOController @val ""
	property ms3 : MainSignal3[0..*] @val ""
	property trains : Train[0..*] @val ""
	property tcs : TrackCircuit[0..*] @val ""
	
	// dictionary trains2 : string -> Train[0..*] @val "" 
	// property light : Light @val ""  
	// property failureSim : LightFailureSim @val ""
	// property es : EffectSensor

	// ----------------------------------
	//
	//
	statechart ILSEnvSM init idle {
		state idle {
		}
	}

}


//////////////////
/*
   IOController
*/
//////////////////
component IOController   
  {
  	port ioIn
  	port ioOut
  	port toeo @IdPort ""
  	port fromeo
  	port fromTrain 
  	port toTrain @IdPort ""
  		  
  		  
    receives createMainSignal3
    receives createTrain
    receives startTrain
    receives stopTrain
    
    receives createTrackCircuit
        
  	statechart IOControllerSM init idle {
  		state idle {
  		    // MainSignal3  		    
  		    transition ms2sig->idle {  		    
  		    	event MainSignal3#createMainSignal3
  		    	action create ILSEnv.ms3
  		    }
  			// trains
  			transition trainStart->idle {
  				event Train#startTrain
  				action send Train.startTrain() port toTrain @forward ""
  			}
  			
  			transition trainStop->idle {
  				event Train#stopTrain
  				action send Train.stopTrain() port toTrain @forward "" 
  			} 
  			
  			transition createTrain->idle {
  				event Train#createTrain
  				action create ILSEnv.trains
  			}
  			
  			transition createTC -> idle {
  				event TrackCircuit#createTrackCircuit
  				action create ILSEnv.tcs
  			}
  			
  			transition tcSig -> idle {
  				event Switch#switchSignal
  				action send Switch.switchSignal() port toeo @forward ""
  			}  			
  		}
  	}
  }