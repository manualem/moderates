datatype Integer;
datatype String;
datatype Time;

enumeration ButtonLabel {
	UP
	DOWN
	SET
	MODE
}

enumeration DisplayIcon {
	stopwatch
	alarm
	timer
}

singleton device Watch 
{ 
	property sysTime : Time
	property display : Display
	dictionary buttons : ButtonLabel -> Button [4..4]
	
	message shortPress();
	message longPress();
	
	device Button
	{
		sends shortPress
		sends longPress
	}
	
	message setDisplay(v : Time, format : String);
	message showIcon(icon : DisplayIcon);
	message hideIcon(icon : DisplayIcon);

	device Display
	@annot "dkflksdfj"
	{
		receives setDisplay
		receives showIcon
		receives hideIcon
	}
	
}

component TAST
{
	statechart TAST init Time {
		
		state Time {
			transition nextApp -> Alarm {
				event Watch.buttons['MODE']#shortPress
			}
		}
		
		state AlarmClock { 
			transition nextApp -> StopWatch {
				event Watch.buttons['MODE']#shortPress
			}
		}
		
		composite state StopWatch init Stopped {
		
			property startTime : Time
			property stopTime : Time
		
			state Stopped {
			
				on entry {
					send Watch.display.setDisplay('stopTime', '??:SEC:??')
				}
			
				transition start -> Running {
					event Watch.buttons['UP']#shortPress
					action {
						send Watch.display.showIcon('stopwatch')
						set startTime = 'sysTime - stopTime'
					}
				}
				transition reset -> Stopped {
					event Watch.buttons['DOWN']#shortPress
					action {
						set stopTime = '0'
					}
				}
			}
			
			state Running {
			
				on entry {
					send Watch.display.setDisplay('sysTime - startTime', '??:SEC:??')
				}
			
				transition stop -> Stopped {
					event Watch.buttons['UP']#shortPress
					action {
						send Watch.display.hideIcon('stopwatch')
						set stopTime = 'sysTime - startTime'
					}
				}
			}
		
			transition nextApp -> Timer {
				event Watch.buttons['MODE']#shortPress
			}
		}
		
		state Timer {
			transition nextApp -> Time {
				event Watch.buttons['MODE']#shortPress
			}
		}
	}
}
