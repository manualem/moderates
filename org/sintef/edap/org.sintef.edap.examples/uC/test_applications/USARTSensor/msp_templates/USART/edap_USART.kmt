package edapuC;

require kermeta
require "../Generator.kmt"
require "init_USART.kmt"
require "USART_send_transmit_Hex8.kmt"
require "poll_USART.kmt"
require "USART_send_transmit_hexdump.kmt"
require "USART_send_transmit_byte.kmt"
require "USART_send_transmit.kmt"
require "globals_USART.kmt"

using kermeta::standard
using edap

/*
To register the code generator:
require "USART/edap_USART.kmt"

templates.put("init_USART", init_USART.new)
templates.put("USART_send_transmit_Hex8", USART_send_transmit_Hex8.new)
templates.put("poll_USART", poll_USART.new)
templates.put("USART_send_transmit_hexdump", USART_send_transmit_hexdump.new)
templates.put("USART_send_transmit_byte", USART_send_transmit_byte.new)
templates.put("USART_send_transmit", USART_send_transmit.new)
templates.put("globals_USART", globals_USART.new)
*/

// Add here any accessors for specific platform annotations

aspect class UCDevice {
	
	property readonly usart_freq : String 
		getter is do
			result := "9600" // by default
			var a : StaticProperty init properties.detect{p| p.name == "usart_freq"}
			if a != void then
				result := a.~value
			end
		end
		
	property readonly buffer_size : String 
		getter is do
			result := "32" // by default
			var a : StaticProperty init properties.detect{p| p.name == "buffer_size"}
			if a != void then
				result := a.~value
			end
		end
	
	property readonly terminator : String 
		getter is do
			result := "\\n" // by default
			var a : StaticProperty init properties.detect{p| p.name == "terminator"}
			if a != void then
				result := a.~value
			end
		end
	
	property readonly append_terminator : Boolean 
		getter is do
			result := false
			var a : StaticProperty init properties.detect{p| p.name == "append_terminator"}
			if a != void then
				result := a.~value == "true"
			end
		end
}

