import "types.edap"
import "switch.edap"
import "train.edap"

component TrackCircuit 
	@Composite ""
{
	port tcIn
	port tcOut
	
	connector (tcIn, tcio_tcioIn)
	connector (tcio_tcioOut, tcOut)
	connector (tcio_toTcObjs, switches_swIn)
	connector (tcio_toTcObjs, segments_segIn)
	connector (tcio_toTcObjs, stillers_stillerIn)
	connector (switches_swOut, tcio_fromTrack)
	connector (tcio_totc, tcc_tcsmIn)
	connector (tcc_tcsmOut, tcio_fromtc)
	
	property tcio : TrackCircuitIO @val ""
	property tcc : TrackCircuitController @val ""
	property switches : Switch[0..*] @val ""
	property segments : LineSegment[0..*] @val ""
	property stillers : Stiller [0..*] @val ""
	
	
	message createTrackCircuit ();
	message trackCircuitSignal ();
	
	// dummy SM	
	statechart Dummy init idle {
		state idle  {
		}
	}
	

}

//
// TrackCircuit IO 
//
component TrackCircuitIO {
	
	port tcioIn
	port tcioOut
	port toTcObjs @IdPort ""
	port fromTrack
	port totc
	port fromtc
	
	receives switchSignal
	receives notifyTrainPos
	
	statechart TrackCircuitIOSM init receiving {
		state receiving {
			transition createSwitch -> receiving {
				event Switch#createSwitch
				action create TrackCircuit.switches
			}
			transition createLineSegment -> receiving {
				event LineSegment#createLineSegment
				action create TrackCircuit.segments
			}
			transition switchSig -> receiving {
				event Switch#switchSignal
				action send Switch.switchSignal() port toTcObjs @forward "" 
			}
			transition trainSig -> receiving {
				event Train#notifyTrainPos 
				action send Train.notifyTrainPos() port totc @forward ""
			}
		}
	}
}

//
// State machine within TC
//
component TrackCircuitController
{
	port tcsmIn
	port tcsmOut
	
	statechart TrackCircuitControllerSM init trainOff {
		state trainOff {
			
		}
		state trainOn {
		}
	}
}




//
// LineSegment 
//
component LineSegment {
	port segIn
	port segOut
	
	message createLineSegment ();
	
	statechart LineSegmentSM init idle {
		state idle {
		}
	}
}

//
// Stiller
//
component Stiller {

	port stillerIn
	
	statechart StillerSM init idle {
		state idle {
		}
	}	 
}