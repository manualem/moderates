/* $Id:$ 
 * Creation : March 10, 2011
 * Licence  : EPL 
 * Copyright: SINTEF IKT
 * Authors  : Brice Morin
 */


package edap;


require kermeta
//require "http://edap"
require "platform:/lookup/org.sintef.edap.model/model/edap.ecore"

using kermeta::standard
using kermeta::persistence

using edap

aspect class State
{
	operation getAllStates() : Set<State> is
	do
		var states : Set<State> init Set<State>.new
		states.add(self)
		result := states
	end
}

aspect class ReceiveMessage
{

}

aspect class ExternStatement
{
	method print() : String is
	do
		result := statement
	end
}

aspect class Action
{
	operation print() : String is
	do
		result := ""
	end

	operation getAllActions() : Set<SendAction> is
	do
		var states : Set<SendAction> init Set<SendAction>.new
		result := states
	end
}

aspect class SendAction
{
	method getAllActions() : Set<SendAction> is
	do
		var states : Set<SendAction> init Set<SendAction>.new
		states.add(self)
		result := states
	end
}

aspect class ActionBlock
{
	
	method print() : String is
	do
		var res : String init ""
		self.actions.each{a | res := res + a.print +"\n"}
		result := res
	end
	
	method getAllActions() : Set<SendAction> is
	do
		var states : Set<SendAction> init Set<SendAction>.new
		self.actions.each{a | states.addAll(a.getAllActions.select{s | s.isKindOf(SendAction)})}
		result := states
	end

}

aspect class SoftwareComponent
{
	operation getAllMessages() : Set<Message> is
	do
		var res : Set<Message> init Set<Message>.new
		res.addAll(sends)
		res.addAll(receives)
		result := res
	end
}

aspect class CompositeState
{
	operation getAllMessages() : Set<Message> is
	do
		var res : Set<Message> init Set<Message>.new
		getAllReceivedMessage.each{e |
			res.add(e.message)
		}
		getAllSentMessage.each{e | 
			res.add(e.message)
		}
		result := res
	end
	
	operation getAllReceivedMessage() : Set<ReceiveMessage> is
	do
		var events : Set<ReceiveMessage> init Set<ReceiveMessage>.new
		getAllStates.each{ s |
			s.outgoing.each{t |	
				t.event.select{e | e.isKindOf(ReceiveMessage)}.each{ e | 
				events.add(e.asType(ReceiveMessage))}
			}
		}
		result := events
	end

	operation getAllSentMessage() : Set<SendAction> is
	do
		var events : Set<SendAction> init Set<SendAction>.new
		getAllStates.each{ s |
			s.outgoing.each{t | 
				if (t.action != void) then
					events.addAll(t.action.getAllActions)
				end
			}
		}
		result := events
	end


	method getAllStates() : Set<State> is
	do
		var states : Set<State> init Set<State>.new
		self.substate.each{ s | states.addAll(s.getAllStates)}
		states.add(self)
		result := states
	end
}

class Helper
{
	operation loadThingML(thingMLmodel : String) : EdapModel is do 
		var rep : Repository init EMFRepository.new
		 
		//resource -> plugin once deployed 
		var res : Resource init rep.createResource(thingMLmodel, "platform:/plugin/org.sintef.edap.model/model/edap.ecore")
		res.load
		
		var thingML : EdapModel
		thingML ?= res.one
		
		result := thingML
	end
	
	
	operation loadEDAPModel(uri : String) : EdapModel is do
    	var inputRepository : kermeta::persistence::EMFRepository init kermeta::persistence::EMFRepository.new
    	var inputResource : kermeta::persistence::EMFResource
    	inputResource ?= inputRepository.getResource(uri)
    	result ?= inputResource.contents.one
	end
	
}