/* $Id:$ 
 * Creation : March 10, 2011
 * Licence  : EPL 
 * Copyright: SINTEF IKT
 * Authors  : Brice Morin
 */


package thingML;


require kermeta
//require "platform:/lookup/org.sintef.edap.model/model/edap.ecore"
require "./ThingML.kmt"

using kermeta::standard
using kermeta::persistence

class StringHelper
{
	operation getJavaByteTypes() : Set<String> is
	do
		var res : Set<String> init Set<String>.new
		res.add("Integer")
		res.add("int")
		res.add("Short")
		res.add("short")
		res.add("Long")
		res.add("long")
		res.add("Float")
		res.add("float")
		res.add("Double")
		res.add("double")
		res.add("Byte")
		res.add("byte")
		res.add("Int8")
		res.add("Int16")
		result := res
	end

	operation toJavaConstant(name : String) : String is
	do
		var res : String init name.toUpperCase
		var j : Integer init 0
		
		from var i : Integer init 0
		until i == name.size
		loop
			if (i < (name.size - 1)) then  		
    			if name.elementAt(i).toString == name.elementAt(i).toString.toLowerCase and name.elementAt(i+1).toString == name.elementAt(i+1).toString.toUpperCase then
    				res := res.substring(0,i+1+j)+"_"+res.substring(i+1+j,res.size)
    				j := j+1
    			end
    		end
    		i := i+1
		end
		//stdio.errorln(res)
		result := res
	end
	
	operation firstToUpper(name : String) : String is
	do
		var res : String init name.substring(0,1).toUpperCase + name.substring(1,name.size)
		//stdio.errorln(res)
		result := res
	end	
	
	operation java_type_annotation(p : edap::Type) : String is
	do
		var a : edap::PlatformAnnotation init p.annotations.detect{a | a.name == "java_type"}
		if a != void then
			result := a.~value
		else
			result := p.name
		end

	end
	
	operation toJavaType(p : edap::Type) : String is
	do
			var a : edap::PlatformAnnotation init p.annotations.detect{a | a.name == "java_type"}
			if a != void then
				result := a.~value
			else
				result := p.name
			end
	end
	
	operation isJavaString(p : edap::Type) : Boolean is
	do
		var a : edap::PlatformAnnotation init p.annotations.detect{a | a.name == "java_type"}
		if a != void then
			result := a.~value == "String"
		else
			result := false
		end
	end
	
	operation isJavaByte(p : edap::Type) : Boolean is
	do
		var a : edap::PlatformAnnotation init p.annotations.detect{a | a.name == "java_type"}
		if a != void then
			result := a.~value == "byte" or a.~value == "Byte" 
		else
			result := false
		end
	end
	
	operation getSize(p : edap::Type) : String is
	do
		var a : edap::PlatformAnnotation init p.annotations.detect{a | a.name == "size"}
		if a != void then
			result := a.~value
		else
			result := ""
		end
	end
	
	operation paramsToJava(m : edap::Message) : String is
	do
		var res : String init ""
		var i : Integer init 0
		m.parameters.each{ p | 
			if i > 0 then
				res := res + ", "
			end
			res := res + toJavaType(p.type)+" "+p.name
			i := i+1
		}
		result := res
	end
	
	operation paramsToScala(m : edap::Message) : String is
	do
		var res : String init ""
		var i : Integer init 0
		m.parameters.each{ p | 
			if i > 0 then
				res := res + ", "
			end
			res := res + p.name + " : " + firstToUpper(toJavaType(p.type))
			i := i+1
		}
		result := res
	end
	
	operation paramsToScalaCase(m : edap::Message) : String is
	do
		var res : String init ""
		var i : Integer init 0
		m.parameters.each{ p | 
			if i > 0 then
				res := res + ", "
			end
			res := res + "var " + p.name + " : " + firstToUpper(toJavaType(p.type))
			i := i+1
		}
		result := res
	end		
	
	operation paramsToScalaCallNull(m : edap::Message) : String is
	do
		var res : String init ""
		var i : Integer init 0
		m.parameters.each{ p | 
			if i > 0 then
				res := res + ", "
			end
			res := res + "null.asInstanceOf["+firstToUpper(toJavaType(p.type))+"]"
			i := i+1
		}
		result := res
	end
	
	operation paramsToJavaCall(m : edap::Message) : String is
	do
		var res : String init ""
		var i : Integer init 0
		m.parameters.each{ p | 
			if i > 0 then
				res := res + ", "
			end
			res := res + p.name
			i := i+1
		}
		result := res
	end
	
	operation paramsToGetterCall(m : edap::Message, varname : String) : String is
	do
		var res : String init ""
		var i : Integer init 0
		var uname : String
		m.parameters.each{ p | 
			if i > 0 then
				res := res + ", "
			end
			uname := p.name.substring(0,1).toUpperCase + p.name.substring(1,p.name.size)
			res := res + varname + ".get" + uname + "()"
			i := i+1
		}
		result := res
	end
	
	operation getValue(l : edap::EnumerationLiteral) : String is
	do
		var res : String init "" 
		var annot : edap::PlatformAnnotation init l.annotations.select{a | a.name == "enum_val"}.one
		if annot != void then
			res := annot.~value
		end
		result := res
	end	
}