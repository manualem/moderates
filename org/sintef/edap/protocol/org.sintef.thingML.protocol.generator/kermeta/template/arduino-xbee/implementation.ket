<%@ket
package="thingML"
require="platform:/lookup/org.sintef.edap.model/model/edap.ecore ../../stringHelper.kmt ../../CHelper.kmt"
using="edap"
isAspectClass="false"
class="ArduinoXBeeCPPGenerator"
ismethod="false"operation="generate"
parameters="packageName:String, device:edap::Device"
%>
<%var helper : StringHelper init StringHelper.new%>
<%var chelper : CHelper init CHelper.new.make%>
// include core Wiring API
#include "WProgram.h"

// include this library's description file
#include "<%=device.name%>XBeeAPI.h"

// include the Xbee lib
#include "../XBee/XBee.h"

// Constructor /////////////////////////////////////////////////////////////////
<%=device.name%>XBeeAPI::<%=device.name%>XBeeAPI(uint32_t addr_h, uint32_t addr_l) {
	xbee = XBee();
	addr64 = XBeeAddress64(addr_h, addr_l);
	zbTx = ZBTxRequest(addr64, payload, sizeof(payload));
	txStatus = ZBTxStatusResponse();
	rx = ZBRxResponse();
}

// Public Methods //////////////////////////////////////////////////////////////
void <%=device.name%>XBeeAPI::init_<%=device.name%>XBeeAPI(void) {	
	xbee.begin(9600);
}

void <%=device.name%>XBeeAPI::poll_<%=device.name%>XBeeAPI(void) {	
	 // Look for incomming XBEE messages
  xbee.readPacket();
  if (xbee.getResponse().isAvailable()) { // We got a message
    if (xbee.getResponse().getApiId() == ZB_RX_RESPONSE) { // it is a ZB message
        xbee.getResponse().getZBRxResponse(rx);
        parseIncommingMessage(rx.getData());
    }
  }
}

<%device.sends.each{out | %>
void <%=device.name%>XBeeAPI::send<%=out.name%>(<%=chelper.msgParamsDecl(out)%>) {
   payload[0] = 0x01; // source addr (not used)
   payload[1] = 0xff; // target addr (not used)
   payload[2] = 0x00; // frame num (not used)
   payload[3] = <%=chelper.msgTotalSize(out).toString%>; // length of the params
   payload[4] = <%=out.annotations.select{a | a.name == "code"}.one.~value%>; // command code
   // set params here
   <% var idx : Integer init 5
   out.parameters.each{ p |%>
   <%=chelper.paramWriteBuffer(p, "payload", idx)%>
   <%idx := idx + chelper.paramSize(p) }%>
   // send the message
   xbee.send(zbTx);
}
<%}%>

// Private Methods /////////////////////////////////////////////////////////////
void <%=device.name%>XBeeAPI::parseIncommingMessage(uint8_t data[])
{
	switch(data[4]) // command code
  {
  <%device.receives.each{in | %>
   case <%=in.annotations.select{a | a.name == "code"}.one.~value%>: receive<%=in.name%>(<%=chelper.msgParamsReadBuffer(in, "data", 5)%>); break;
   <%}%>
   default: break; 
  }
}
