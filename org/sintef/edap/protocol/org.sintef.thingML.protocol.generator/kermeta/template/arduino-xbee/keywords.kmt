package thingML;
require kermeta
require "platform:/lookup/org.sintef.edap.model/model/edap.ecore"
require "../../stringHelper.kmt"
require "../../CHelper.kmt"
using kermeta::standard
using kermeta::utils
using edap
class ArduinoXBeeKeywordsGenerator{
operation generate(packageName:String, device:edap::Device):String is do
var _res: StringBuffer init StringBuffer.new
_res.append("")
var helper : StringHelper init StringHelper.new
_res.append("#\n# Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, Version 3, 29 June 2007;\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# \thttp://www.gnu.org/licenses/lgpl-3.0.txt\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# Authors: Franck Fleurey and Brice Morin\n# Company: SINTEF IKT, Oslo, Norway\n# Date: 2011\n#\n\n#######################################\n# Syntax Coloring For ")
_res.append(device.name)
_res.append("XBeeAPI\n#######################################\n\n#######################################\n# Datatypes (KEYWORD1)\n#######################################\n\n")
_res.append(device.name)
_res.append("XBeeAPI\tKEYWORD1\n\n#######################################\n# Methods and Functions (KEYWORD2)\n#######################################\n\n")
device.receives.each{out | 
_res.append("receive")
_res.append(out.name)
_res.append("\tKEYWORD2\n")
}
_res.append("\n")
device.sends.each{out | 
_res.append("send")
_res.append(out.name)
_res.append("\tKEYWORD2\n")
}
_res.append("\n#######################################\n# Instances (KEYWORD2)\n#######################################\n\n#######################################\n# Constants (LITERAL1)\n#######################################\n\n")
result := _res.toString
end
}
