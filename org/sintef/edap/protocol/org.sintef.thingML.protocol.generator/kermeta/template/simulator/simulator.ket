<%@ket
package="thingML"
require="platform:/lookup/org.sintef.edap.model/model/edap.ecore ../../stringHelper.kmt"
using=""
isAspectClass="false"
class="InteractiveDataSimulatorGenerator"
ismethod="false"operation="generate"
parameters="packageName:String, device:edap::Device"
%>
<%var helper : StringHelper init StringHelper.new%>
package <%=packageName%>;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.Insets;

import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.JOptionPane;

import java.util.List;
import java.util.ArrayList;

public class Interactive<%=device.name%>DataSimulator implements ActionListener, ItemListener{

	private JFrame frame;
	
	<%device.sends.each{msg |%>
	//Attributes related to <%=msg.name%>
	private JButton sendButton<%=msg.name%>;
		<%msg.parameters.each{ p | %>
	private JTextField field<%=msg.name+"_"+p.name%>;
		<%}%>
		
	<%}%>

	public void init(){
		frame = new JFrame("Interactive <%=device.name%> Data Simulator");
		frame.setLayout(new GridBagLayout());
		
		GridBagConstraints c = new GridBagConstraints();
		c.gridwidth = 1;
		c.fill = GridBagConstraints.HORIZONTAL;
		c.insets = new Insets(0,3,0,3);
		
		<%var x : Integer init 0%>
		<%device.sends.each{msg |%>
		c.gridy = 0;
 		c.gridx = <%=x.toString%>;
		frame.add(create<%=msg.name%>Label(), c);
		
		c.gridy = 1;
 		c.gridx = <%=x.toString%>;
		frame.add(create<%=msg.name%>Panel(), c);
		
		c.gridy = 2;
 		c.gridx = <%=x.toString%>;
		frame.add(createSend<%=msg.name%>Button(), c);
		
		sendButton<%=msg.name%>.addActionListener(this);
		
		<%x := x+1%>
		<%}%>
		
				
		frame.pack();
		frame.setVisible(true);
	}

	<%device.sends.each{ msg |%>
	public void send<%=msg.name%>() {
		System.out.println("send<%=msg.name%>");
		boolean valid = true;	
		Incoming<%=device.name%>Message result = null;
		<%msg.parameters.each{ p | %>
		<%=helper.firstToUpper(helper.toJavaType(p.type))%> <%=p.name%> = null;
		<%}%>
		try{
		<%msg.parameters.each{ p | %>
		<%if helper.isJavaString(p.type) then%>
			<%=p.name%> = field<%=msg.name+"_"+p.name%>.getText();
		<%else%>
			<%=p.name%> = <%=helper.firstToUpper(helper.toJavaType(p.type))%>.parse<%=helper.firstToUpper(helper.toJavaType(p.type))%>(field<%=msg.name+"_"+p.name%>.getText()); 
		<%end%>
		<%}%>
		} catch (NumberFormatException nfe){
			JOptionPane.showMessageDialog(new JFrame(), "Please check that all the inputs have the right type", "Error: Invalid input", JOptionPane.ERROR_MESSAGE);
			valid = false;
		}
		if (valid){
			List<Byte> params = new ArrayList<Byte>();
			<%msg.parameters.each{ p | %>
			<%if helper.getJavaByteTypes.contains(p.type.name) then%>
				<%if helper.isJavaByte(p.type) then%>
			params.add((byte)0);
			params.add(<%=p.name%>);
				<%else%>
			params.add((byte)0);
			params.add(<%=p.name%>.byteValue());
				<%end%>		
			<%else%>
				<%if helper.isJavaString(p.type) then%>
			for(int i = 0; i < <%=p.name%>.getBytes().length; i++){
				params.add(<%=p.name%>.getBytes()[i]);
			}
				<%end%>
			<%end%>
			<%}%>
			Byte data[] = params.toArray(new Byte[0]);
			byte packet[] = new byte[16];
			for(int i=0; i<Math.min(16-5, data.length); i++){
				packet[i+5] = data[i];
			}
			packet[4] = <%=device.name%>Protocol.<%=helper.toJavaConstant(msg.name)%>;
			result = <%=device.name%>Protocol.createMessageForIncomingPacket(packet);
			System.out.println(result);
		} 
	}
	
	public JLabel create<%=msg.name%>Label(){
		JLabel label = new JLabel();
		label.setText("<%=msg.name%>");
		return label;
	}
	
	public JButton createSend<%=msg.name%>Button(){
		sendButton<%=msg.name%> = new JButton("send");
		return sendButton<%=msg.name%>;
	}
	
	<%var y : Integer init 0%>	
	public JPanel create<%=msg.name%>Panel(){

		GridBagConstraints c = new GridBagConstraints();
		c.fill = GridBagConstraints.HORIZONTAL;
		c.weightx = 0.5;
		
		JPanel panel = new JPanel(new GridBagLayout());

			<%msg.parameters.each{ p | %>
		JLabel label<%=p.name%> = new JLabel();
		label<%=p.name%>.setText("<%=p.name%>");
 		c.gridx = 0;
		c.gridy = <%=y.toString%>;
 		panel.add(label<%=p.name%>, c);
 		
 		field<%=msg.name+"_"+p.name%> = new JTextField();
		field<%=msg.name+"_"+p.name%>.setText("<%=p.name%>");
 		c.gridx = 1;
		c.gridy = <%=y.toString%>;
 		panel.add(field<%=msg.name+"_"+p.name%>, c);
 		

 			<%y := y+1%>
			<%}%>
			
		return panel;	
	}
	<%}%>
	
	@Override
	public void actionPerformed(ActionEvent ae) {
		<%var k : Integer init 0%>
		<%device.sends.each{msg |%>
		 <%if k >0 then%>else <%end%>if ( ae.getSource() == sendButton<%=msg.name%>) {
		 	send<%=msg.name%>();
		 }
		 <%k := k+1%>
		<%}%>	
	}

	@Override
	public void itemStateChanged(ItemEvent arg0) {
		// TODO Auto-generated method stub
		
	}	
	
	public static void main(String args[]){
		Interactive<%=device.name%>DataSimulator simulator = new Interactive<%=device.name%>DataSimulator();
		simulator.init();
	}
}