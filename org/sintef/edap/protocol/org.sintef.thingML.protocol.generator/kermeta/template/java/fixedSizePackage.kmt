package thingML;
require kermeta
require "../../stringHelper.kmt"
using kermeta::standard
using kermeta::utils
class FixedSizePackageGenerator{
operation generate(packageName:String):String is do
var _res: StringBuffer init StringBuffer.new
_res.append("")
var helper : StringHelper init StringHelper.new
_res.append("/**\n * Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, Version 3, 29 June 2007;\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.gnu.org/licenses/lgpl-3.0.txt\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * Authors: Franck Fleurey and Brice Morin\n * Company: SINTEF IKT, Oslo, Norway\n * Date: 2011\n */\npackage ")
_res.append(packageName)
_res.append(";\n\nimport java.nio.ByteBuffer;\n\npublic abstract class FixedSizePacket {\n\n\tprotected byte[] data;\n\tprotected ByteBuffer buffer;\n\t\n\tpublic byte[] getPacket() {\n\t\treturn data;\n\t}\n\t\n\tpublic String toString() {\n\t\tString result = \"\";\n\t\tfor (int i = 0; i< 16; i++) {\n\t\t\tresult += Byte.toString(data[i]) + ' ';\n\t\t}\n\t\treturn result;\n\t}\n\t\n\tpublic static String toString(byte msg[]) {\n\t\tString result = \"\";\n\t\tfor (int i = 0; i< msg.length; i++) {\n\t\t\tresult += Byte.toString(msg[i]) + ' ';\n\t\t}\n\t\treturn result;\n\t}\n\t\n\tpublic FixedSizePacket() {\n\t\tdata = new byte[16];\n\t\tbuffer = ByteBuffer.wrap(data, 5, 10);\n\t}\n\t\n\tpublic void setPacketData(byte[] packet) {\n\t\tSystem.arraycopy(packet, 0, this.data, 0, packet.length);\n\t\tbuffer = ByteBuffer.wrap(data, 5, 10);\n\t}\n\t\n\tpublic void setSourceAddress(byte address) {\n\t\tdata[0] = address;\n\t}\n\tpublic byte getSourceAddress() {\n\t\treturn data[0];\n\t}\n\t\n\tpublic void setTargetAddress(byte address) {\n\t\tdata[1] = address;\n\t}\n\tpublic byte getTargetAddress() {\n\t\treturn data[1];\n\t}\n\t\n\tpublic void setFrameNumber(byte frame) {\n\t\tdata[2] = frame;\n\t}\n\tpublic byte getFrameNumber() {\n\t\treturn data[2];\n\t}\n\t\n\tpublic void setLength(byte length) {\n\t\tif (length > 10) length = 10;\n\t\tdata[3] = length;\n\t}\n\tpublic byte getLength() {\n\t\treturn data[3];\n\t}\n\t\n\tpublic byte[] getRawData() {\n\t\tbyte[] result = new byte[getLength()];\n        System.arraycopy(this.data, 5, result, 0, getLength());\n\t\treturn result;\n\t}\n\t\n\tpublic void setRawData(byte[] ndata) {\n        int length = Math.min(10, ndata.length);\n        System.arraycopy(ndata, 0, this.data, 5, length);\n\t\tsetLength((byte)length);\n\t}\n\t\n}\n")
result := _res.toString
end
}
