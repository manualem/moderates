package thingML;
require kermeta
require "../../../stringHelper.kmt"
using kermeta::standard
using kermeta::utils
class InteractiveDataGUIGenerator{
operation generate(packageName:String, device:edap::Device, isClient:Boolean):String is do
var _res: StringBuffer init StringBuffer.new
_res.append("")
var helper : StringHelper init StringHelper.new
_res.append("/**\n * Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, Version 3, 29 June 2007;\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.gnu.org/licenses/lgpl-3.0.txt\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * Authors: Franck Fleurey and Brice Morin\n * Company: SINTEF IKT, Oslo, Norway\n * Date: 2011\n */\npackage ")
_res.append(packageName)
_res.append(".sim;\n\nimport ")
_res.append(packageName)
_res.append(".observer.")
_res.append(device.name)
if isClient then
_res.append("Client")
end
_res.append("Observer;\nimport ")
_res.append(packageName)
_res.append(".*;\n\nimport java.awt.Color;\nimport java.awt.Dimension;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.util.Random;\n\nimport javax.swing.JButton;\nimport javax.swing.JComboBox;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTextField;\nimport javax.swing.JTextPane;\nimport javax.swing.text.BadLocationException;\nimport javax.swing.text.Style;\nimport javax.swing.text.StyleConstants;\nimport javax.swing.text.StyleContext;\nimport javax.swing.text.StyledDocument;\n\npublic class Interactive")
_res.append(device.name)
_res.append("DataGUI")
if isClient then
_res.append("Client")
end
_res.append(" implements ActionListener {\n\t\n\tprivate static boolean init = false;\n\t\n\tprivate static final Interactive")
_res.append(device.name)
_res.append("DataGUI")
if isClient then
_res.append("Client")
end
_res.append(" _this = new Interactive")
_res.append(device.name)
_res.append("DataGUI")
if isClient then
_res.append("Client")
end
_res.append("();\n\t\n\tpublic static Interactive")
_res.append(device.name)
_res.append("DataController")
if isClient then
_res.append("Client")
end
_res.append(" handler;\n\t\n\tprivate static JFrame frame;\n\tprivate static JTextPane screen;\n\tprivate static JButton clearButton;\n\tprivate static JButton logOwnEventsButton;\n\t\n")
device.sends.each{msg |
_res.append("\t//Attributes related to ")
_res.append(msg.name)
_res.append("\n\tprivate static JButton sendButton")
_res.append(msg.name)
_res.append(";\n")
msg.parameters.each{ p | 
_res.append("")
if p.type.isKindOf(edap::Enumeration) then
_res.append("\tprivate static JComboBox field")
_res.append(msg.name+helper.firstToUpper(p.name))
_res.append(";\n")
else
_res.append("\tprivate static JTextField field")
_res.append(msg.name+helper.firstToUpper(p.name))
_res.append(";\n")
end
_res.append("")
}
_res.append("\t\n\tpublic static JButton getSendButton")
_res.append(msg.name)
_res.append("() {\n\t\treturn sendButton")
_res.append(msg.name)
_res.append(";\n\t}\n")
msg.parameters.each{ p | 
_res.append("")
if p.type.isKindOf(edap::Enumeration) then
_res.append("\tpublic static JComboBox getField")
_res.append(msg.name+helper.firstToUpper(p.name))
_res.append("() {\n\t\treturn field")
_res.append(msg.name+helper.firstToUpper(p.name))
_res.append(";\n\t}\n")
else
_res.append("\tpublic static JTextField getField")
_res.append(msg.name+helper.firstToUpper(p.name))
_res.append("() {\n\t\treturn field")
_res.append(msg.name+helper.firstToUpper(p.name))
_res.append(";\n\t}\n")
end
_res.append("")
}
_res.append("\t\t\n")
}
_res.append("\n\tpublic static void print(String id, String data){\n\t\ttry {\n        \tStyledDocument doc = screen.getStyledDocument();\n            doc.insertString(doc.getLength(), formatForPrint(data), doc.getStyle(\"receive\"+id+\"Style\"));\n            screen.setCaretPosition(doc.getLength());\n        } catch (BadLocationException ex) {\n            ex.printStackTrace();\n        }\n\t}\n\t\t\n\tpublic static void addListener(ActionListener l){\n")
device.sends.each{msg |
_res.append("\t\tsendButton")
_res.append(msg.name)
_res.append(".addActionListener(l);\n")
}
_res.append("\t}\n\t\n\tpublic static void init(){\n\t\tif (!init) {\n\t\t\tinit = true;\n\t\t\t\n\t\t\tclearButton = new JButton(\"Clear Console\");\n\t\t\tlogOwnEventsButton = new JButton(\"Log Own Events (Click to Activate)\");\n\t\t\tframe = new JFrame(\"Interactive ")
_res.append(device.name)
_res.append(" Data Simulator\");\n\t\t\tframe.setLayout(new GridBagLayout());\n\t\t\tframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\t\t\t\n\t\t\tGridBagConstraints c = new GridBagConstraints();\n\t\t\tc.gridwidth = 1;\n\t\t\tc.fill = GridBagConstraints.HORIZONTAL;\n\t\t\tc.insets = new Insets(0,3,0,3);\n\t\t\t\n")
var x : Integer init 0
_res.append("")
device.sends.each{msg |
_res.append("\t\t\t//GUI related to ")
_res.append(msg.name)
_res.append("\n\t\t\tc.gridy = 0;\n\t \t\tc.gridx = ")
_res.append(x.toString)
_res.append(";\n\t\t\tframe.add(createLabel(\"")
_res.append(msg.name)
_res.append("\"), c);\n\t\t\t\n\t\t\tc.gridy = 1;\n\t \t\tc.gridx = ")
_res.append(x.toString)
_res.append(";\n\t\t\tframe.add(create")
_res.append(msg.name)
_res.append("Panel(), c);\n\t\t\t\n\t\t\tc.gridy = 2;\n\t \t\tc.gridx = ")
_res.append(x.toString)
_res.append(";\n\t \t\tsendButton")
_res.append(msg.name)
_res.append(" = createSendButton(\"")
_res.append(msg.name)
_res.append("\");\n\t\t\tframe.add(sendButton")
_res.append(msg.name)
_res.append(", c);\n\t\t\t\n")
x := x+1
_res.append("")
}
_res.append("\t\t\t\t\t\t\n\t\t\tc.gridy = 3;\n\t\t\tc.gridx = 0;\n\t\t\tc.gridwidth = ")
_res.append(device.sends.size.toString)
_res.append(";\n\t\t\tframe.add(createJTextPane(), c);\n\t\t\t\n\t\t\tc.gridy = 4;\n\t\t\tframe.add(clearButton, c);\n\t\t\t\n\t\t\tc.gridy = 5;\n\t\t\tframe.add(logOwnEventsButton, c);\n\t\t\t\n\t\t\tframe.pack();\n\t\t\tclearButton.addActionListener(_this);\n\t\t\tlogOwnEventsButton.addActionListener(_this);\n\t\t\tframe.setVisible(true);\n\t\t}\n\t}\n\t\n\tpublic static JLabel createLabel(String name){\n\t\treturn new JLabel(name);\n\t}\n\t\n\tpublic static JButton createSendButton(String name){\n\t\treturn new JButton(\"send\");\n\t}\n\t\n")
device.sends.each{ msg |
_res.append("")
var y : Integer init 0
_res.append("\tpublic static JPanel create")
_res.append(msg.name)
_res.append("Panel(){\n\n\t\tGridBagConstraints c = new GridBagConstraints();\n\t\tc.fill = GridBagConstraints.HORIZONTAL;\n\t\tc.weightx = 0.5;\n\t\t\n\t\tJPanel panel = new JPanel(new GridBagLayout());\n\n")
msg.parameters.each{ p | 
_res.append("\t\tJLabel label")
_res.append(p.name)
_res.append(" = new JLabel();\n\t\tlabel")
_res.append(p.name)
_res.append(".setText(\"")
_res.append(p.name)
_res.append("\");\n \t\tc.gridx = 0;\n\t\tc.gridy = ")
_res.append(y.toString)
_res.append(";\n \t\tpanel.add(label")
_res.append(p.name)
_res.append(", c);\n")
if p.type.isKindOf(edap::Enumeration) then
_res.append("\t\t")
_res.append(helper.firstToUpper(p.type.name))
_res.append("[] values")
_res.append(msg.name+helper.firstToUpper(p.name))
_res.append(" = {")
var w : Integer init 0 p.type.asType(edap::Enumeration).literals.each{l | if w > 0 then
_res.append(", ")
end
_res.append(helper.firstToUpper(p.type.name))
_res.append(".")
_res.append(l.name)
w := w+1}
_res.append("};\n\t\tfield")
_res.append(msg.name+helper.firstToUpper(p.name))
_res.append(" = new JComboBox(values")
_res.append(msg.name+helper.firstToUpper(p.name))
_res.append(");\t\t\n")
else
_res.append(" \t\tfield")
_res.append(msg.name+helper.firstToUpper(p.name))
_res.append(" = new JTextField();\n\t\tfield")
_res.append(msg.name+helper.firstToUpper(p.name))
_res.append(".setText(\"")
_res.append(p.name)
_res.append("\");\n")
end
_res.append(" \t\tc.gridx = 1;\n\t\tc.gridy = ")
_res.append(y.toString)
_res.append(";\n \t\tpanel.add(field")
_res.append(msg.name+helper.firstToUpper(p.name))
_res.append(", c);\n")
y := y+1
_res.append("")
}
_res.append("\t\t\t\n\t\treturn panel;\t\n\t}\n\t\n")
}
_res.append("\t\n\t\t\n\tpublic static JScrollPane createJTextPane(){\n\t\tscreen = new JTextPane();\n        screen.setFocusable(false);\n        screen.setEditable(false);\n        screen.setAutoscrolls(true);\n  \n  \t\tJScrollPane editorScrollPane = new JScrollPane(screen);\n\t\teditorScrollPane.setVerticalScrollBarPolicy(\n\t\t                JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\n\t\teditorScrollPane.setPreferredSize(new Dimension(480, 240));\n\t\teditorScrollPane.setMinimumSize(new Dimension(320, 160));\n        \n        StyledDocument doc = screen.getStyledDocument();\n        Style def = StyleContext.getDefaultStyleContext().getStyle(StyleContext.DEFAULT_STYLE);\n            \n        Random rnd = new Random();\n")
device.receives.each{msg |
_res.append("\t\tStyle receive")
_res.append(msg.name)
_res.append("Style = doc.addStyle(\"receive")
_res.append(msg.name)
_res.append("Style\", def);\n        StyleConstants.setForeground(receive")
_res.append(msg.name)
_res.append("Style, new Color(rnd.nextInt(176), rnd.nextInt(176), rnd.nextInt(176)));\t\n")
}
_res.append("        return editorScrollPane;\n\t}\n\t\n\tprivate static String formatForPrint(String text) {\n            return (text.endsWith(\"\\n\") ? text : text + \"\\n\");\n    }\n\n\t@Override\n\tpublic void actionPerformed(ActionEvent ae) {\n\t\tif (ae.getSource() == clearButton){\n\t\t\tscreen.setText(\"\");\n\t\t} /*else if (ae.getSource() == logOwnEventsButton) {\n\t\t\tif (logOwnEventsButton.getText().equals(\"Log Own Events (Click to Activate)\")){\n\t\t\t\tlogOwnEventsButton.setText(\"Log Own Events (Click to De-activate)\");\n\t\t\t\thandler.register((")
_res.append(device.name)
if isClient then
_res.append("Client")
end
_res.append("Observer)handler);\n\t\t\t} else {\n\t\t\t\tlogOwnEventsButton.setText(\"Log Own Events (Click to Activate)\");\n\t\t\t\thandler.unregister((")
_res.append(device.name)
if isClient then
_res.append("Client")
end
_res.append("Observer)handler);\t\t\t\t\n\t\t\t}\n\t\t}*/\n\t}     \n}")
result := _res.toString
end
}
