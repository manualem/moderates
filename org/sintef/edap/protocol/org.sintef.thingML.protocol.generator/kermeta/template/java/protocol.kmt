package thingML;
require kermeta
require "../../stringHelper.kmt"
using kermeta::standard
using kermeta::utils
class ProtocolGenerator{
operation generate(packageName:String, device:edap::Device, root:edap::EdapModel):String is do
var _res: StringBuffer init StringBuffer.new
_res.append("")
var helper : StringHelper init StringHelper.new
_res.append("package ")
_res.append(packageName)
_res.append(";\n\nimport ")
_res.append(packageName)
_res.append(".msg.*;\n\npublic abstract class ")
_res.append(device.name)
_res.append("Protocol {\n\n\t//Enumerations\n")
device.all_types.select{t | t.isKindOf(edap::Enumeration)}.each{ e | 
_res.append("\tpublic static enum ")
_res.append(e.name)
_res.append("{\t\n\t\t")
var x : Integer init 0 e.asType(edap::Enumeration).literals.each{l | if x > 0 then
_res.append(",\n\t\t")
end
_res.append(l.name)
_res.append("(\"")
_res.append(helper.getValue(l))
_res.append("\")")
x := x+1}
_res.append(";\n\t\n\t\tprivate final String value;\n\t\t")
_res.append(e.name)
_res.append("(String value){\n\t\t\tthis.value = value;\n\t\t}\n\t\t\n\t\tpublic String getValue(){\n\t\t\treturn value;\n\t\t}\n\t}\n")
}
_res.append("\n")
device.receives.each{out | 
_res.append("\tpublic static final byte ")
_res.append(helper.toJavaConstant(out.name))
_res.append(" = ")
_res.append(out.annotations.select{a | a.name == "code"}.one.~value)
_res.append("; \n")
}
_res.append("")
device.sends.each{in | 
_res.append("\tpublic static final byte ")
_res.append(helper.toJavaConstant(in.name))
_res.append(" = ")
_res.append(in.annotations.select{a | a.name == "code"}.one.~value)
_res.append("; \n")
}
_res.append("\t\n\tpublic static FixedSizePacket createMessageFromPacket(byte[] packet) {\n\t\tbyte packetType = packet[4];\n\t\tFixedSizePacket result = null;\n\t\tswitch(packetType){\n")
device.receives.each{out | 
_res.append("\t\t\tcase ")
_res.append(helper.toJavaConstant(out.name))
_res.append(": result = new ")
_res.append(out.name)
_res.append("(packet); break; \n")
}
_res.append("")
device.sends.each{in | 
_res.append("\t\t\tcase ")
_res.append(helper.toJavaConstant(in.name))
_res.append(": result = new ")
_res.append(in.name)
_res.append("(packet); break; \n")
}
_res.append("\t\t\tdefault: break;\n\t\t}\n\t\treturn result;\n\t}\n\n")
device.receives.each{out | 
_res.append("\tpublic static FixedSizePacket create")
_res.append(out.name)
_res.append("(")
_res.append(helper.paramsToJava(out))
_res.append(") {\n\t\t")
_res.append(out.name)
_res.append(" result = new ")
_res.append(out.name)
_res.append("(")
_res.append(helper.paramsToJavaCall(out))
_res.append(");\n\t\treturn result;\n\t}\n\t\n")
}
_res.append("\t\n")
device.sends.each{out | 
_res.append("\tpublic static FixedSizePacket create")
_res.append(out.name)
_res.append("(")
_res.append(helper.paramsToJava(out))
_res.append(") {\n\t\t")
_res.append(out.name)
_res.append(" result = new ")
_res.append(out.name)
_res.append("(")
_res.append(helper.paramsToJavaCall(out))
_res.append(");\n\t\treturn result;\n\t}\n\t\n")
}
_res.append("}\n")
result := _res.toString
end
}
