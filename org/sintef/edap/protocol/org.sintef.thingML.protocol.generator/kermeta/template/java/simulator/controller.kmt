package thingML;
require kermeta
require "../../../stringHelper.kmt"
using kermeta::standard
using kermeta::utils
class InteractiveDataControllerGenerator{
operation generate(packageName:String, device:edap::Device, toKevoreeComponent:Boolean):String is do
var _res: StringBuffer init StringBuffer.new
_res.append("")
var helper : StringHelper init StringHelper.new
_res.append("package ")
_res.append(packageName)
_res.append(".sim;\n\nimport ")
_res.append(packageName)
_res.append(".*;\n\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\nimport javax.swing.JFrame;\nimport javax.swing.JOptionPane;\n\nimport java.nio.ByteBuffer;\n\n")
if toKevoreeComponent then
_res.append("import org.kevoree.annotation.*;\nimport org.kevoree.framework.AbstractComponentType;\nimport org.kevoree.framework.MessagePort;\n")
end
_res.append("\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n")
if toKevoreeComponent then
_res.append("@Provides({\n    @ProvidedPort(name = \"in\", type = PortType.MESSAGE)\n})\n@Requires({\n    @RequiredPort(name = \"out\", type = PortType.MESSAGE)\n})\n@Library(name = \"Moderates::Stub\")\n@ComponentType\n")
end
_res.append("public class Interactive")
_res.append(device.name)
_res.append("DataController ")
if toKevoreeComponent then
_res.append("extends AbstractComponentType ")
end
_res.append("implements ActionListener, ProtocolHandler {\n\n\tprivate Logger log;\n\n\tprivate List<ProtocolHandler> handlers;\n\t\n\tprivate SimpleDateFormat dateFormat;\n\n\tpublic Interactive")
_res.append(device.name)
_res.append("DataController(){\n\t\thandlers = new LinkedList<ProtocolHandler>();\n\t\tlog = Logger.getLogger(Interactive")
_res.append(device.name)
_res.append("DataController.class.getName());\n\t\tdateFormat = new SimpleDateFormat(\"dd MMM yyy 'at' HH:mm:ss.SSS\");\n\t\tInteractive")
_res.append(device.name)
_res.append("DataGUI.init();\n\t\tInteractive")
_res.append(device.name)
_res.append("DataGUI.addListener(this);\n\t\tInteractive")
_res.append(device.name)
_res.append("DataGUI.handler = this;\t\n\t}\n\t\n")
if toKevoreeComponent then
_res.append("\t@Start\n    public void start() {\n    \tlog.log(Level.INFO, \"Interactive")
_res.append(device.name)
_res.append("DataController has been started\");\n    }\n\n    @Stop\n    public void stop() {\n    \tlog.log(Level.INFO, \"Interactive")
_res.append(device.name)
_res.append("DataController has been stopped\");\n    }\n\n    @Update\n    public void update() {\n    \n    }\n")
end
_res.append("\t\n\n\tprivate void doSend(FixedSizePacket data){\n\t\tif (data != null) {\n")
if toKevoreeComponent then
_res.append("\t\t\tif (this.isPortBinded(\"out\")) {\n           \t\tthis.getPortByName(\"out\", MessagePort.class).process(data);\n          \t\tlog.log(Level.INFO, \"Message sent \"+data);\n        \t} else {\n        \t\tlog.log(Level.WARNING, \"No component connected to output port. Cannot send message: \"+data);\n        \t}\n")
else
_res.append("        \tSystem.out.println(data+\" --> \"+data.getPacket());\n")
end
_res.append("            for (ProtocolHandler h : handlers){\n\t\t\t\th.receiveMsg(data.getPacket());\n\t\t\t}\n        }\n        else {\n        \tSystem.out.println(\"Data is null\");\n        }\n\t}\n\n")
device.sends.each{ msg |
_res.append("\tpublic void send")
_res.append(msg.name)
_res.append("() {\n\t\tFixedSizePacket fsp = null;\n")
if msg.parameters.size > 0 then
_res.append("\t\tboolean valid = true;\n")
msg.parameters.each{ p | 
_res.append("\t\t")
_res.append(helper.firstToUpper(helper.toJavaType(p.type)))
_res.append(" ")
_res.append(p.name)
_res.append(" = null;\n")
}
_res.append("\t\ttry{\n")
msg.parameters.each{ p | 
_res.append("")
if helper.isJavaString(p.type) then
_res.append("")
if p.type.isKindOf(edap::Enumeration) then
_res.append("\t\t\t")
_res.append(p.name)
_res.append(" = ((")
_res.append(device.name)
_res.append("Protocol.")
_res.append(helper.firstToUpper(p.name))
_res.append(")Interactive")
_res.append(device.name)
_res.append("DataGUI.field")
_res.append(msg.name+"_"+p.name)
_res.append(".getSelectedItem()).getValue();\n")
else
_res.append("\t\t\t")
_res.append(p.name)
_res.append(" = Interactive")
_res.append(device.name)
_res.append("DataGUI.field")
_res.append(msg.name+"_"+p.name)
_res.append(".getText();\n")
end
_res.append("\t\t\tif (")
_res.append(p.name)
_res.append(".length() > ")
_res.append(helper.getSize(p.type))
_res.append(") ")
_res.append(p.name)
_res.append(" = ")
_res.append(p.name)
_res.append(".substring(0, ")
_res.append(helper.getSize(p.type))
_res.append("-1);\n")
else
_res.append("")
if p.type.isKindOf(edap::Enumeration) then
_res.append("\t\t\t")
_res.append(p.name)
_res.append(" = ")
_res.append(helper.firstToUpper(helper.toJavaType(p.type)))
_res.append(".parse")
_res.append(helper.firstToUpper(helper.toJavaType(p.type)))
_res.append("(((")
_res.append(device.name)
_res.append("Protocol.")
_res.append(helper.firstToUpper(p.name))
_res.append(")Interactive")
_res.append(device.name)
_res.append("DataGUI.field")
_res.append(msg.name+"_"+p.name)
_res.append(".getSelectedItem()).getValue());\n")
else
_res.append("\t\t\t")
_res.append(p.name)
_res.append(" = ")
_res.append(helper.firstToUpper(helper.toJavaType(p.type)))
_res.append(".parse")
_res.append(helper.firstToUpper(helper.toJavaType(p.type)))
_res.append("(Interactive")
_res.append(device.name)
_res.append("DataGUI.field")
_res.append(msg.name+"_"+p.name)
_res.append(".getText());\n")
end
_res.append("")
end
_res.append("")
}
_res.append("\t\t} catch (NumberFormatException nfe){\n\t\t\tJOptionPane.showMessageDialog(new JFrame(), \"Please check that all the inputs have the right type\", \"Error: Invalid input\", JOptionPane.ERROR_MESSAGE);\n\t\t\tvalid = false;\n\t\t}\n\t\tif (valid){\n\t\t\tfsp = ")
_res.append(device.name)
_res.append("Protocol.create")
_res.append(msg.name)
_res.append("(")
_res.append(helper.paramsToJavaCall(msg))
_res.append(");\n\t\t\tdoSend(fsp);\n\t\t}\n")
else
_res.append("\t\tfsp = ")
_res.append(device.name)
_res.append("Protocol.create")
_res.append(msg.name)
_res.append("();\t\n\t\tdoSend(fsp);\n")
end
_res.append("\t}\n\n")
}
_res.append("\n")
if toKevoreeComponent then
_res.append("\t@Port(name=\"in\", method=\"receiveMessage\")\n")
end
_res.append("\tpublic void receiveMessage(byte[] packet){\n\t\tFixedSizePacket data = ")
_res.append(device.name)
_res.append("Protocol.createMessageFromPacket(packet);\n\t\tif (data != null) {\n\t\t\tInteractive")
_res.append(device.name)
_res.append("DataGUI.print(data.getClass().getSimpleName(), \"[\"+dateFormat.format(new Date(System.currentTimeMillis()))+\"]: \"+data.toString()+\" --> \"+FixedSizePacket.toString(packet));\n\t\t}\n\t}\n\n\t@Override\n\tpublic void actionPerformed(ActionEvent ae) {\n")
var l : Integer init 0
_res.append("")
device.sends.each{msg |
_res.append("\t\t ")
if l >0 then
_res.append("else ")
end
_res.append("if ( ae.getSource() == Interactive")
_res.append(device.name)
_res.append("DataGUI.sendButton")
_res.append(msg.name)
_res.append(") {\n\t\t \tsend")
_res.append(msg.name)
_res.append("();\n\t\t }\n")
l := l+1
_res.append("")
}
_res.append("\t}\n\t\n\tpublic static void main(String args[]){\n\t\tInteractive")
_res.append(device.name)
_res.append("DataController controller = new Interactive")
_res.append(device.name)
_res.append("DataController();\n\t}\n\t\n\t@Override\n\tpublic void register(ProtocolHandler handler) {\n\t\thandlers.add(handler);\n\t}\n\t\n\t@Override\n\tpublic void unregister(ProtocolHandler handler) {\n\t\thandlers.remove(handler);\n\t}\t\n\n\t@Override\n\tpublic void receiveMsg(byte[] msg) {\n\t\treceiveMessage(msg);\n\t}\n}")
result := _res.toString
end
}
