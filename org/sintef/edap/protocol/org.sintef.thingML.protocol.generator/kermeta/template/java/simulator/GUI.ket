<%@ket
package="thingML"
require="../../../stringHelper.kmt"
using=""
isAspectClass="false"
class="InteractiveDataGUIGenerator"
ismethod="false"operation="generate"
parameters="packageName:String, device:edap::Device, isClient:Boolean"
%>
<%var helper : StringHelper init StringHelper.new%>
package <%=packageName%>.sim;

import <%=packageName%>.observer.<%=device.name%><%if isClient then%>Client<%end%>Observer;
import <%=packageName%>.*;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;

public class Interactive<%=device.name%>DataGUI<%if isClient then%>Client<%end%> implements ActionListener {
	
	private static boolean init = false;
	
	private static final Interactive<%=device.name%>DataGUI<%if isClient then%>Client<%end%> _this = new Interactive<%=device.name%>DataGUI<%if isClient then%>Client<%end%>();
	
	public static Interactive<%=device.name%>DataController<%if isClient then%>Client<%end%> handler;
	
	private static JFrame frame;
	private static JTextPane screen;
	private static JButton clearButton;
	private static JButton logOwnEventsButton;
	
	<%device.sends.each{msg |%>
	//Attributes related to <%=msg.name%>
	public static JButton sendButton<%=msg.name%>;
		<%msg.parameters.each{ p | %>
			<%if p.type.isKindOf(edap::Enumeration) then%>
	public static JComboBox field<%=msg.name+helper.firstToUpper(p.name)%>;
			<%else%>
	public static JTextField field<%=msg.name+helper.firstToUpper(p.name)%>;
			<%end%>
		<%}%>
		
	<%}%>

	public static void print(String id, String data){
		try {
        	StyledDocument doc = screen.getStyledDocument();
            doc.insertString(doc.getLength(), formatForPrint(data), doc.getStyle("receive"+id+"Style"));
            screen.setCaretPosition(doc.getLength());
        } catch (BadLocationException ex) {
            ex.printStackTrace();
        }
	}
		
	public static void addListener(ActionListener l){
		<%device.sends.each{msg |%>
		sendButton<%=msg.name%>.addActionListener(l);
		<%}%>
	}
	
	public static void init(){
		if (!init) {
			init = true;
			
			clearButton = new JButton("Clear Console");
			logOwnEventsButton = new JButton("Log Own Events (Click to Activate)");
			frame = new JFrame("Interactive <%=device.name%> Data Simulator");
			frame.setLayout(new GridBagLayout());
			
			GridBagConstraints c = new GridBagConstraints();
			c.gridwidth = 1;
			c.fill = GridBagConstraints.HORIZONTAL;
			c.insets = new Insets(0,3,0,3);
			
			<%var x : Integer init 0%>
			<%device.sends.each{msg |%>
			//GUI related to <%=msg.name%>
			c.gridy = 0;
	 		c.gridx = <%=x.toString%>;
			frame.add(createLabel("<%=msg.name%>"), c);
			
			c.gridy = 1;
	 		c.gridx = <%=x.toString%>;
			frame.add(create<%=msg.name%>Panel(), c);
			
			c.gridy = 2;
	 		c.gridx = <%=x.toString%>;
	 		sendButton<%=msg.name%> = createSendButton("<%=msg.name%>");
			frame.add(sendButton<%=msg.name%>, c);
			
			<%x := x+1%>
			<%}%>
						
			c.gridy = 3;
			c.gridx = 0;
			c.gridwidth = <%=device.sends.size.toString%>;
			frame.add(createJTextPane(), c);
			
			c.gridy = 4;
			frame.add(clearButton, c);
			
			c.gridy = 5;
			frame.add(logOwnEventsButton, c);
			
			frame.pack();
			clearButton.addActionListener(_this);
			logOwnEventsButton.addActionListener(_this);
			frame.setVisible(true);
		}
	}
	
	public static JLabel createLabel(String name){
		return new JLabel(name);
	}
	
	public static JButton createSendButton(String name){
		return new JButton("send");
	}
	
	<%device.sends.each{ msg |%>
	<%var y : Integer init 0%>	
	public static JPanel create<%=msg.name%>Panel(){

		GridBagConstraints c = new GridBagConstraints();
		c.fill = GridBagConstraints.HORIZONTAL;
		c.weightx = 0.5;
		
		JPanel panel = new JPanel(new GridBagLayout());

			<%msg.parameters.each{ p | %>
		JLabel label<%=p.name%> = new JLabel();
		label<%=p.name%>.setText("<%=p.name%>");
 		c.gridx = 0;
		c.gridy = <%=y.toString%>;
 		panel.add(label<%=p.name%>, c);
				<%if p.type.isKindOf(edap::Enumeration) then%>
		<%=helper.firstToUpper(p.type.name)%>[] values<%=msg.name+"_"+p.name%> = {<%var w : Integer init 0 p.type.asType(edap::Enumeration).literals.each{l | if w > 0 then%>, <%end%><%=helper.firstToUpper(p.type.name)%>.<%=l.name%><%w := w+1}%>};
		field<%=msg.name+"_"+p.name%> = new JComboBox(values<%=msg.name+"_"+p.name%>);		
				<%else%>		
 		field<%=msg.name+"_"+p.name%> = new JTextField();
		field<%=msg.name+"_"+p.name%>.setText("<%=p.name%>");
 				<%end%>
 		c.gridx = 1;
		c.gridy = <%=y.toString%>;
 		panel.add(field<%=msg.name+"_"+p.name%>, c);
 			<%y := y+1%>
			<%}%>
			
		return panel;	
	}
	
	<%}%>
	
		
	public static JScrollPane createJTextPane(){
		screen = new JTextPane();
        screen.setFocusable(false);
        screen.setEditable(false);
        screen.setAutoscrolls(true);
  
  		JScrollPane editorScrollPane = new JScrollPane(screen);
		editorScrollPane.setVerticalScrollBarPolicy(
		                JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
		editorScrollPane.setPreferredSize(new Dimension(480, 240));
		editorScrollPane.setMinimumSize(new Dimension(320, 160));
        
        StyledDocument doc = screen.getStyledDocument();
        Style def = StyleContext.getDefaultStyleContext().getStyle(StyleContext.DEFAULT_STYLE);
            
        Random rnd = new Random();
		<%device.receives.each{msg |%>
		Style receive<%=msg.name%>Style = doc.addStyle("receive<%=msg.name%>Style", def);
        StyleConstants.setForeground(receive<%=msg.name%>Style, new Color(rnd.nextInt(176), rnd.nextInt(176), rnd.nextInt(176)));	
		<%}%>        
        return editorScrollPane;
	}
	
	private static String formatForPrint(String text) {
            return (text.endsWith("\\n") ? text : text + "\\n");
    }

	@Override
	public void actionPerformed(ActionEvent ae) {
		if (ae.getSource() == clearButton){
			screen.setText("");
		} /*else if (ae.getSource() == logOwnEventsButton) {
			if (logOwnEventsButton.getText().equals("Log Own Events (Click to Activate)")){
				logOwnEventsButton.setText("Log Own Events (Click to De-activate)");
				handler.register((<%=device.name%><%if isClient then%>Client<%end%>Observer)handler);
			} else {
				logOwnEventsButton.setText("Log Own Events (Click to Activate)");
				handler.unregister((<%=device.name%><%if isClient then%>Client<%end%>Observer)handler);				
			}
		}*/
	}     
}