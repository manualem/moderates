<%@ket
package="thingML"
require="../../../stringHelper.kmt"
using=""
isAspectClass="false"
class="InteractiveDataControllerGenerator"
ismethod="false"operation="generate"
parameters="packageName:String, device:edap::Device, toKevoreeComponent:Boolean"
%>
<%var helper : StringHelper init StringHelper.new%>
package <%=packageName%>.sim;

import <%=packageName%>.*;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.LinkedList;
import java.util.List;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.swing.JFrame;
import javax.swing.JOptionPane;

import java.nio.ByteBuffer;

<%if toKevoreeComponent then%>
import org.kevoree.annotation.*;
import org.kevoree.framework.AbstractComponentType;
import org.kevoree.framework.MessagePort;
<%end%>

import java.util.logging.Level;
import java.util.logging.Logger;

<%if toKevoreeComponent then%>
@Provides({
    @ProvidedPort(name = "in", type = PortType.MESSAGE)
})
@Requires({
    @RequiredPort(name = "out", type = PortType.MESSAGE)
})
@Library(name = "Moderates::Stub")
@ComponentType
<%end%>
public class Interactive<%=device.name%>DataController <%if toKevoreeComponent then%>extends AbstractComponentType <%end%>implements ActionListener, ProtocolHandler {

	private Logger log;

	private List<ProtocolHandler> handlers;
	
	private SimpleDateFormat dateFormat;

	public Interactive<%=device.name%>DataController(){
		handlers = new LinkedList<ProtocolHandler>();
		log = Logger.getLogger(Interactive<%=device.name%>DataController.class.getName());
		dateFormat = new SimpleDateFormat("dd MMM yyy 'at' HH:mm:ss.SSS");
		Interactive<%=device.name%>DataGUI.init();
		Interactive<%=device.name%>DataGUI.addListener(this);
		Interactive<%=device.name%>DataGUI.handler = this;	
	}
	
	<%if toKevoreeComponent then%>
	@Start
    public void start() {
    	log.log(Level.INFO, "Interactive<%=device.name%>DataController has been started");
    }

    @Stop
    public void stop() {
    	log.log(Level.INFO, "Interactive<%=device.name%>DataController has been stopped");
    }

    @Update
    public void update() {
    
    }
    <%end%>
	

	private void doSend(FixedSizePacket data){
		if (data != null) {
		<%if toKevoreeComponent then%>
			if (this.isPortBinded("out")) {
           		this.getPortByName("out", MessagePort.class).process(data);
          		log.log(Level.INFO, "Message sent "+data);
        	} else {
        		log.log(Level.WARNING, "No component connected to output port. Cannot send message: "+data);
        	}
        <%else%>
        	System.out.println(data+" --> "+data.getPacket());
        <%end%>
            for (ProtocolHandler h : handlers){
				h.receiveMsg(data.getPacket());
			}
        }
        else {
        	System.out.println("Data is null");
        }
	}

	<%device.sends.each{ msg |%>
	public void send<%=msg.name%>() {
		FixedSizePacket fsp = null;
		<%if msg.parameters.size > 0 then%>
		boolean valid = true;
		<%msg.parameters.each{ p | %>
		<%=helper.firstToUpper(helper.toJavaType(p.type))%> <%=p.name%> = null;
		<%}%>
		try{
		<%msg.parameters.each{ p | %>
		<%if helper.isJavaString(p.type) then%>
			<%if p.type.isKindOf(edap::Enumeration) then%>
			<%=p.name%> = ((<%=device.name%>Protocol.<%=helper.firstToUpper(p.type.name)%>)Interactive<%=device.name%>DataGUI.field<%=msg.name+"_"+p.name%>.getSelectedItem()).getValue();
			<%else%>
			<%=p.name%> = Interactive<%=device.name%>DataGUI.field<%=msg.name+"_"+p.name%>.getText();
			<%end%>
			if (<%=p.name%>.length() > <%=helper.getSize(p.type)%>) <%=p.name%> = <%=p.name%>.substring(0, <%=helper.getSize(p.type)%>-1);
		<%else%>
			<%if p.type.isKindOf(edap::Enumeration) then%>
			<%=p.name%> = <%=helper.firstToUpper(helper.toJavaType(p.type))%>.parse<%=helper.firstToUpper(helper.toJavaType(p.type))%>(((<%=device.name%>Protocol.<%=helper.firstToUpper(p.type.name)%>)Interactive<%=device.name%>DataGUI.field<%=msg.name+"_"+p.name%>.getSelectedItem()).getValue());
			<%else%>
			<%=p.name%> = <%=helper.firstToUpper(helper.toJavaType(p.type))%>.parse<%=helper.firstToUpper(helper.toJavaType(p.type))%>(Interactive<%=device.name%>DataGUI.field<%=msg.name+"_"+p.name%>.getText());
			<%end%>
		<%end%>
		<%}%>
		} catch (NumberFormatException nfe){
			JOptionPane.showMessageDialog(new JFrame(), "Please check that all the inputs have the right type", "Error: Invalid input", JOptionPane.ERROR_MESSAGE);
			valid = false;
		}
		if (valid){
			fsp = <%=device.name%>Protocol.create<%=msg.name%>(<%=helper.paramsToJavaCall(msg)%>);
			doSend(fsp);
		}
		<%else%>
		fsp = <%=device.name%>Protocol.create<%=msg.name%>();	
		doSend(fsp);
		<%end%>
	}

	<%}%>

	<%if toKevoreeComponent then%>
	@Port(name="in", method="receiveMessage")
	<%end%>
	public void receiveMessage(byte[] packet){
		FixedSizePacket data = <%=device.name%>Protocol.createMessageFromPacket(packet);
		if (data != null) {
			Interactive<%=device.name%>DataGUI.print(data.getClass().getSimpleName(), "["+dateFormat.format(new Date(System.currentTimeMillis()))+"]: "+data.toString()+" --> "+FixedSizePacket.toString(packet));
		}
	}

	@Override
	public void actionPerformed(ActionEvent ae) {
		<%var l : Integer init 0%>
		<%device.sends.each{msg |%>
		 <%if l >0 then%>else <%end%>if ( ae.getSource() == Interactive<%=device.name%>DataGUI.sendButton<%=msg.name%>) {
		 	send<%=msg.name%>();
		 }
		 <%l := l+1%>
		<%}%>	
	}
	
	public static void main(String args[]){
		Interactive<%=device.name%>DataController controller = new Interactive<%=device.name%>DataController();
	}
	
	@Override
	public void register(ProtocolHandler handler) {
		handlers.add(handler);
	}
	
	@Override
	public void unregister(ProtocolHandler handler) {
		handlers.remove(handler);
	}	

	@Override
	public void receiveMsg(byte[] msg) {
		receiveMessage(msg);
	}
}