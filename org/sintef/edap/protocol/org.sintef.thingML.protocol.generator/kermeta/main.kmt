/* $Id:$ 
 * Creation : March 10, 2011
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            bmori
 */

package thingML;


require kermeta
require "./helper.kmt"
require "./template/java/fixedSizePackage.kmt"
require "./template/java/protocolPacket.kmt"
require "./template/java/protocol.kmt"
require "./template/java/message.kmt"
require "./template/java/simulator/GUI.kmt"
require "./template/java/simulator/controller.kmt"
require "./template/java/observer/deviceObserver.kmt"
require "./template/java/observer/deviceSubject.kmt"
require "./template/java/simulator/test.kmt"
require "./template/java/comm/ZigBee/zigbee.kmt"

using kermeta::standard
using kermeta::io

using edap

class MainJavaProtocolGenerator
{

	operation mainJava(thingMLuri : String, srcFolder : String) : Void is do 
		main(thingMLuri, srcFolder, false)
	end

	operation mainKevoree(thingMLuri : String, srcFolder : String) : Void is do 
		main(thingMLuri, srcFolder, true)
	end

	operation main(thingMLuri : String, srcFolder : String, isKevoree: Boolean) : Void is do 
		var helper : Helper init Helper.new
		var thingMLmodel : EdapModel init helper.loadThingML(thingMLuri)
		
		var fspGenerator : FixedSizePackageGenerator init FixedSizePackageGenerator.new
		var ppGenerator : ProtocolPacketGenerator init ProtocolPacketGenerator.new
		var pGenerator : ProtocolGenerator init ProtocolGenerator.new 
		var mGenerator : MessageGenerator init MessageGenerator.new
		
		var guiGenerator : InteractiveDataGUIGenerator init InteractiveDataGUIGenerator.new
		var controllerGenerator : InteractiveDataControllerGenerator init InteractiveDataControllerGenerator.new
		
		var deviceObserver : ObserverGenerator init ObserverGenerator.new
		var deviceSubject : SubjectGenerator init SubjectGenerator.new
		
		var simulatorTestGenerator : SimulatorTestGenerator init SimulatorTestGenerator.new
		
		var zbGenerator : ZigBeeGenerator init ZigBeeGenerator.new
		
		var file : FileIO init FileIO.new
		
		file.writeTextFile(srcFolder+"/org/sintef/moderates/FixedSizePacket.java", fspGenerator.generate("org.sintef.moderates"))
		
		thingMLmodel.types.select{t | t.isKindOf(Device)}.each{t |
		
			stdio.writeln("ProtocolPacketGenerator")
			stdio.writeln("-----------------------")
			file.writeTextFile(srcFolder+"/org/sintef/moderates/"+t.name+"ProtocolPacket.java", ppGenerator.generate("org.sintef.moderates", t.asType(Device), thingMLmodel))
			stdio.writeln("")
			
			
			stdio.writeln("ProtocolGenerator")
			stdio.writeln("-----------------------")
			file.writeTextFile(srcFolder+"/org/sintef/moderates/"+t.name+"Protocol.java", pGenerator.generate("org.sintef.moderates", t.asType(Device), thingMLmodel))
			stdio.writeln("")
			
			t.asType(Device).sends.each{ m |
				stdio.writeln("IncomingMessageGenerator")
				stdio.writeln("-----------------------")
				file.writeTextFile(srcFolder+"/org/sintef/moderates/msg/"+m.name+".java", mGenerator.generate("org.sintef.moderates", m, t.asType(Device)))
				stdio.writeln("")
			}
			
			t.asType(Device).receives.each{ m |
				stdio.writeln("OutgoingMessageGenerator")
				stdio.writeln("-----------------------")
				file.writeTextFile(srcFolder+"/org/sintef/moderates/msg/"+m.name+".java", mGenerator.generate("org.sintef.moderates", m, t.asType(Device)))
				stdio.writeln("")
			}
			
			
			
			stdio.writeln("ClientObserverGenerator")
			stdio.writeln("-----------------------")
			file.writeTextFile(srcFolder+"/org/sintef/moderates/observer/"+t.name+"ClientObserver.java", deviceObserver.generate("org.sintef.moderates", t.asType(Device), true))
			stdio.writeln("")
			
			stdio.writeln("ObserverGenerator")
			stdio.writeln("-----------------------")
			file.writeTextFile(srcFolder+"/org/sintef/moderates/observer/"+t.name+"Observer.java", deviceObserver.generate("org.sintef.moderates", t.asType(Device), false))
			stdio.writeln("")

			stdio.writeln("ClientSubjectGenerator")
			stdio.writeln("-----------------------")
			file.writeTextFile(srcFolder+"/org/sintef/moderates/observer/"+t.name+"ClientSubject.java", deviceSubject.generate("org.sintef.moderates", t.asType(Device), true))
			stdio.writeln("")
			
			stdio.writeln("SubjectGenerator")
			stdio.writeln("-----------------------")
			file.writeTextFile(srcFolder+"/org/sintef/moderates/observer/"+t.name+"Subject.java", deviceSubject.generate("org.sintef.moderates", t.asType(Device), false))
			stdio.writeln("")
			
			
			
			stdio.writeln("InteractiveDataGUIGenerator")
			stdio.writeln("-----------------------")
			file.writeTextFile(srcFolder+"/org/sintef/moderates/sim/Interactive"+t.name+"DataGUI.java", guiGenerator.generate("org.sintef.moderates", t.asType(Device), false))
			stdio.writeln("")
			
			stdio.writeln("InteractiveDataControllerGenerator")
			stdio.writeln("-----------------------")
			file.writeTextFile(srcFolder+"/org/sintef/moderates/sim/Interactive"+t.name+"DataController.java", controllerGenerator.generate("org.sintef.moderates", t.asType(Device), isKevoree, false))
			stdio.writeln("")
			
			var reverse : Device init t.asType(Device).createReverse
			
			stdio.writeln("InteractiveDataGUIGenerator")
			stdio.writeln("-----------------------")
			file.writeTextFile(srcFolder+"/org/sintef/moderates/sim/Interactive"+t.name+"DataGUIClient.java", guiGenerator.generate("org.sintef.moderates", reverse, true))
			stdio.writeln("")
			
			stdio.writeln("InteractiveDataControllerGenerator")
			stdio.writeln("-----------------------")
			file.writeTextFile(srcFolder+"/org/sintef/moderates/sim/Interactive"+t.name+"DataControllerClient.java", controllerGenerator.generate("org.sintef.moderates", reverse, isKevoree, true))
			stdio.writeln("")
			
			stdio.writeln("SimulatorTestGenerator")
			stdio.writeln("-----------------------")
			file.writeTextFile(srcFolder+"/org/sintef/moderates/sim/Test"+t.name+".java", simulatorTestGenerator.generate("org.sintef.moderates", t.asType(Device)))
			stdio.writeln("")
			
			stdio.writeln("XBeeGenerator")
			stdio.writeln("-----------------------")
			file.writeTextFile(srcFolder+"/org/sintef/moderates/comm/ZigBee4"+t.name+".java", zbGenerator.generate("org.sintef.moderates", t.asType(Device)))
			stdio.writeln("")		
		}
	end
}