/* $Id:$ 
 * Creation : March 10, 2011
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            bmori
 */

package thingML;


require kermeta
require "./helper.kmt"
require "./CHelper.kmt"
require "./template/arduino-xbee/header.kmt"
require "./template/arduino-xbee/implementation.kmt"
require "./template/arduino-xbee/example.kmt"
require "./template/arduino-xbee/keywords.kmt"
require "./template/arduino-serial/header.kmt"
require "./template/arduino-serial/implementation.kmt"
require "./template/arduino-serial/example.kmt"
require "./template/arduino-serial/keywords.kmt"

using kermeta::standard
using kermeta::io

using edap

class MainArduinoProtocolGenerator
{

operation mainSerial(thingMLuri : String, srcFolder : String) : Void is do 
		var helper : Helper init Helper.new
		var thingMLmodel : EdapModel init helper.loadThingML(thingMLuri)
		
		var header : ArduinoHeaderGenerator init ArduinoHeaderGenerator.new
		var impl : ArduinoCPPGenerator init ArduinoCPPGenerator.new
		var example: ArduinoExampleGenerator init ArduinoExampleGenerator.new
		var keywds : ArduinoKeywordsGenerator init ArduinoKeywordsGenerator.new
		
		
		var file : FileIO init FileIO.new
		
		thingMLmodel.types.select{t | t.isKindOf(Device)}.each{t |
		
			stdio.writeln("ArduinoHeaderGenerator")
			stdio.writeln("-----------------------")
			file.writeTextFile(srcFolder+"/"+t.name+"/" +t.name+".h", header.generate(t.name, t.asType(Device)))
			stdio.writeln("")
			
			
			stdio.writeln("ArduinoCPPGenerator")
			stdio.writeln("-----------------------")
			file.writeTextFile(srcFolder+"/"+t.name+"/" +t.name+".cpp", impl.generate(t.name, t.asType(Device)))
			stdio.writeln("")
	
			stdio.writeln("ArduinoKeywordsGenerator")
			stdio.writeln("-----------------------")
			file.writeTextFile(srcFolder+"/"+t.name+"/keywords.txt", keywds.generate(t.name, t.asType(Device)))
			stdio.writeln("")
			
			
			stdio.writeln("ArduinoExampleGenerator")
			stdio.writeln("-----------------------")
			file.writeTextFile(srcFolder+"/"+t.name+"/examples/" +t.name+ "Example/"+t.name+"Example.pde", example.generate(t.name, t.asType(Device)))
			stdio.writeln("")		
			
		}
	end
	
	operation mainXBee(thingMLuri : String, srcFolder : String) : Void is do 
		var helper : Helper init Helper.new
		var thingMLmodel : EdapModel init helper.loadThingML(thingMLuri)
		
		var header : ArduinoXBeeHeaderGenerator init ArduinoXBeeHeaderGenerator.new
		var impl : ArduinoXBeeCPPGenerator init ArduinoXBeeCPPGenerator.new
		var example: ArduinoXBeeExampleGenerator init ArduinoXBeeExampleGenerator.new
		var keywds : ArduinoXBeeKeywordsGenerator init ArduinoXBeeKeywordsGenerator.new
		
		
		var file : FileIO init FileIO.new
		
		thingMLmodel.types.select{t | t.isKindOf(Device)}.each{t |
		
			stdio.writeln("ArduinoHeaderGenerator")
			stdio.writeln("-----------------------")
			file.writeTextFile(srcFolder+"/"+t.name+"XBeeAPI/" +t.name+"XBeeAPI.h", header.generate(t.name, t.asType(Device)))
			stdio.writeln("")
			
			
			stdio.writeln("ArduinoCPPGenerator")
			stdio.writeln("-----------------------")
			file.writeTextFile(srcFolder+"/"+t.name+"XBeeAPI/" +t.name+"XBeeAPI.cpp", impl.generate(t.name, t.asType(Device)))
			stdio.writeln("")
	
			stdio.writeln("ArduinoKeywordsGenerator")
			stdio.writeln("-----------------------")
			file.writeTextFile(srcFolder+"/"+t.name+"XBeeAPI/keywords.txt", keywds.generate(t.name, t.asType(Device)))
			stdio.writeln("")
			
			
			stdio.writeln("ArduinoExampleGenerator")
			stdio.writeln("-----------------------")
			file.writeTextFile(srcFolder+"/"+t.name+"XBeeAPI/examples/" +t.name+ "XBeeAPIExample/"+t.name+"XBeeAPIExample.pde", example.generate(t.name, t.asType(Device)))
			stdio.writeln("")		
			
		}
	end
	
}