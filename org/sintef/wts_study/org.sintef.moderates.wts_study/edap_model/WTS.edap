//import "../devices/Button.edap"

import "lib/Led.edap"
import "lib/Timer.edap"
import "lib/RF2500.edap"
import "lib/MSP430Sensor.edap"

// Definition of the sensor protocol

component WTS {

	property name : String
	
	property temp : Integer 
	property volt : Integer
	
	property min : Integer
	property max : Integer
	property interval : Integer
	
	property interval_cpt : Integer
	
	property min_alarm : Integer
	property max_alarm : Integer
	property bat_alarm : Integer

	// Behaviour of the application
	statechart WTS init INIT {
	
		state INIT {
			
			on entry { 
				send Timer.start('1', '1000')
				send LED.light_on('1') // RED
				send LED.light_on('2') // GREEN
				'min_alarm = 260;'
				'max_alarm = 190;'
				'bat_alarm = 30;'
				'interval = 0;'
				'interval_cpt = 0;'
				'strcpy(name, "No name ");'
				
			}
			
			transition run -> ACTIVE {
				event Timer#timeout
				guard 'timer_id == 1'
				action {
					send LED.light_off('1')
					send LED.light_off('2')
				}
			}
		}
	
		composite state ACTIVE init ReadSensorValues {
			
			state WaitingForCmd {
			
				on entry { 
					send Timer.start('1', '10000')
				}
				
				transition update_data -> ReadSensorValues {
					event Timer#timeout
					guard 'timer_id == 1'
				}
			
				transition GetData -> WaitingForCmd {
					event WTSClient#GetData
					action send WTSClient.SensorData('temp','min','max','batt')
				}
				transition GetStatus -> WaitingForCmd {
					event WTSClient#GetStatus
					action send WTSClient.SensorStatus('interval','min_alarm','max_alarm','bat_alarm')
				}
				transition GetName -> WaitingForCmd {
					event WTSClient#GetName
					action send WTSClient.SensorName('name')
				}
				
				transition GetData -> WaitingForCmd {
					event WTSClient#ResetMinMax
					action 'min = temp; max = temp;'
				}
				transition GetData -> WaitingForCmd {
					event WTSClient#SetMinAlarm
					action 'min_alarm = value;'
				}
				transition GetData -> WaitingForCmd {
					event WTSClient#SetMaxAlarm
					action 'max_alarm = value;'
				}
				transition GetData -> WaitingForCmd {
					event WTSClient#SetBattAlarm
					action 'bat_alarm = value;'
				}
				transition GetData -> WaitingForCmd {
					event WTSClient#SetInterval
					action 'interval = value;'
				}
				transition SetName -> WaitingForCmd {
					event WTSClient#SetName
					action 'strcpy(name, new_name);'
				}
			}
			
			state ReadSensorValues {
				
				on entry {
					send LED.light_on('2') // GREEN
					send MSP430Sensor.mesure_temperature()
				}
				
				on exit {
					send LED.light_off('2')
					'interval_cpt++;'
					'if (interval != 0 && interval_cpt >= interval) {'
						send WTSClient.SensorData('temp','min','max','batt')
						'interval_cpt = 0;'
					'}'	
				}
				
				transition temperature -> ReadSensorValues {
					event MSP430Sensor#temperature_value
					action {
						'temp = v;'
						'if (temp > max) max = temp;'
						'if (temp < min) min = temp;'
						send MSP430Sensor.mesure_voltage()
					}
				}
				
				transition voltage -> WaitingForCmd {
					event MSP430Sensor#voltage_value
					action 'batt = v;'
				}
			}
		}
		
	}
}

device WTSClient {

	message GetData() @code "1";
	message GetStatus() @code "2";
	message GetName() @code "3";
	
	message ResetMinMax() @id "10";
	message SetMinAlarm(value : Integer) @code "11";
	message SetMaxAlarm(value : Integer) @code "12";
	message SetBattAlarm(value : Integer) @code "13";
	message SetInterval(value : Integer) @code "14";
	message SetName(new_name : String) @code "15";
	
	message SensorData(temp : Integer, min : Integer, max : Integer, batt : Integer) @code "64";
	message SensorStatus(interval : Integer, min_alarm : Integer, max_alarm : Integer, batt_alarm : Integer) @code "65";
	message SensorName(name : String) @code "66";

	sends GetData, GetStatus, GetName
	sends ResetMinMax, SetMinAlarm, SetMaxAlarm, SetBattAlarm, SetInterval, SetName
	
	receives SensorData, SensorStatus, SensorName
	
}
