edap "../Led.edap"

device LED {

	// MSP specific property (Change this to fit circuit)
	property MSP_PIN = "P1.0,P1.1" // The built-in LEDs

global 
<generator>
class LED {
	reference ADDR : String
	reference PORT : String
	reference BIT : String
	reference LABEL : String
	
}

aspect class UCDevice {
	
	reference _leds : OrderedSet<LED>
	
	property readonly LEDs : OrderedSet<LED>
		getter is do
			if _leds == void then
				result := OrderedSet<LED>.new
				var pin : StaticProperty init properties.detect{p| p.name == "MSP_PIN"}
				if pin != void then
					var l : LED
					var i : Integer init 1
					pin.~value.split(",").each { p |
						l := LED.new
						p := p.replace(" ", "")
						l.LABEL :=  p
						//stdio.writeln("p=" + p + ";")
						l.PORT := p.substring(0,2)
						l.BIT :=  p.substring(3,4)
						l.ADDR := i.toString
						i := i + 1
						result.add(l)
					}
					_leds := result
				end
			else
					result := _leds
			end
		end
	
}
</generator>
<template></template>

init 
<template>
<%d.LEDs.each{ b | %>	<%=b.PORT%>SEL &= ~(1 << <%=b.BIT%>); // use <%=b.LABEL%> as digital IO
	<%=b.PORT%>DIR |= (1 << <%=b.BIT%>); // output
	<%=b.PORT%>OUT &= ~(1 << <%=b.BIT%>); // OFF
<%}%>
</template>

message light_on {
send <template>
	switch(led_id) {
<%d.LEDs.each{ l | %>
	case <%=l.ADDR%>: <%=l.PORT%>OUT |= (1 << <%=l.BIT%>); // ON
		break;
<%}%>
	default: break;
	}
</template>
}

message light_off {
send <template>
	switch(led_id) {
<%d.LEDs.each{ l | %>
	case <%=l.ADDR%>: <%=l.PORT%>OUT &= ~(1 << <%=l.BIT%>); // OFF
		break;
<%}%>
	default: break;
	}
</template>
}

message toggle {
send <template>
	switch(led_id) {
<%d.LEDs.each{ l | %>
	case <%=l.ADDR%>: <%=l.PORT%>OUT ^= (1 << <%=l.BIT%>); // TOGGLE
		break;
<%}%>
	default: break;
	}
</template>
}

}
