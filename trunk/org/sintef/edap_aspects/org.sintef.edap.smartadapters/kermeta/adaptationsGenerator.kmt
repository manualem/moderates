/* $Id:$ 
 * Creation : February 9, 2010
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            barais
 */


package smartadapters4MODERATES;
require "platform:/lookup/org.sintef.edap.smartadapters/metamodel/Edap_AOM_Framework.ecore"

require kermeta
using kermeta::standard

aspect class Adaptation{
	operation toDrools(ctx:adaptations::Context) : Void is do 
		ctx.res.append("//"+self.getMetaClass.name+": toDrools method not implemented")
	end
}

aspect class SplitAdaptation
{
	operation getSubCollection() : Set<Object> is
		abstract
}

package adaptations{

class Context{
	reference res : kermeta::utils::StringBuffer
	reference cache : kermeta::utils::Hashtable<Object,String>
	operation getGenerateName():String is do
		if (i.isVoid) then i:= 0 end
		result :="s"+ i.toString()
		i:=i+1
	end
	reference i : Integer	
	
	operation generateSetOne(objecttoSet:Object ,propertyName:String, isString:Boolean, val:Object, ref:Boolean) : Void is do
		if (not val.isVoid) then
			res.append(cache.getValue(objecttoSet))
			res.append(".set")
			res.append(propertyName)
			res.append("(")
			if isString then res.append("\"") end
			if ref then
				res.append(cache.getValue(val))					
			else
				res.append(val.toString)		
			end
			if isString then res.append("\"") end
			res.append(");\n")
		end		
	end

	operation generateSetMany(objecttoSet:Object, propertyName:String, isString:Boolean, vals:Set<Object>, ref:Boolean) : Void is do
		vals.each{val|
			res.append(cache.getValue(objecttoSet))
			res.append(".get")
			res.append(propertyName)
			res.append("().add(")
			if isString then res.append("\"") end
			if ref then
				res.append(cache.getValue(val))					
			else
				res.append(val.toString)		
			end
			if isString then res.append("\"") end
			res.append(");\n")
		}
			
	end
	
	
}

aspect class SetState
{
	method toDrools(ctx:Context) : Void is do
		ctx.generateSetOne(self.StateToSet, "Entry", false, self.entry, true)
		ctx.generateSetOne(self.StateToSet, "Exit", false, self.exit, true)
		ctx.generateSetMany(self.StateToSet, "Incoming", false, self.incoming, true)
		ctx.generateSetMany(self.StateToSet, "Outgoing", false, self.outgoing, true)
		ctx.generateSetMany(self.StateToSet, "Properties", false, self.properties, true)
	end
}

aspect class SetActionBlock
{
	method toDrools(ctx:Context) : Void is do
		var act : Set<edap::Action> init Set<edap::Action>.new
		self.actions.each{a | 
			if a.isInstanceOf(SplitAdaptation) then
				a.asType(SplitAdaptation).getSubCollection.each{ac |
					act.add(ac.asType(edap::Action))
				}
			else
				act.add(a.asType(edap::Action))
			end
		}
		
		ctx.generateSetMany(self.blockToSet, "Actions", false, act, true)
	end
}

aspect class Before_actions
{
	method getSubCollection() : Set<edap::Action> is
	do
		var res : Set<edap::Action> init Set<edap::Action>.new
		var i : Integer init 0 
		from var a : edap::Action init self.source.actions.elementAt(i)
		until a == void or a == index or i > self.source.actions.size-1
		loop
			res.add(a)
			i := i+1
			a := self.source.actions.elementAt(i)
		end
		result := res
	end
}

}