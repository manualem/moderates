global java.util.Map uniqueobjects;
global java.util.Map perRole;
global java.util.Map perElem;
Rule "Aspect"
when
$s0Decl: edap.CompositeState()
$PC_anyStateDecl: edap.State()
$PC_toIdleDecl: edap.Transition()
$PC_IdleDecl: edap.State(name == "Idle")

$s0: edap.CompositeState(this == $s0Decl, substate contains $PC_anyStateDecl, substate contains $PC_IdleDecl)
$PC_anyState: edap.State(this == $PC_anyStateDecl, outgoing contains $PC_toIdleDecl)
$PC_toIdle: edap.Transition(this == $PC_toIdleDecl, target == $PC_IdleDecl, source == $PC_anyStateDecl)
$PC_Idle: edap.State(this == $PC_IdleDecl, incoming contains $PC_toIdleDecl)

then

edap.State AD_Off = null;
edap.Transition AD_toIdle = null;
edap.Transition AD_toOff = null;

java.util.Map<String, Object> scope_AD_Off = new java.util.HashMap<String, Object>();
scope_AD_Off.put("$s0", $s0);
if (perRole.get(scope_AD_Off) == null){
	perRole.put(scope_AD_Off, new java.util.HashMap<String, Object>());
}
AD_Off = (edap.State) ((java.util.Map<String, Object>) perRole.get(scope_AD_Off)).get("AD_Off");
if ( AD_Off == null){
	AD_Off = edap.EdapFactory.eINSTANCE.createState();
	((java.util.Map<String, Object>) perRole.get(scope_AD_Off)).put("AD_Off",AD_Off);
}
java.util.Map<String, Object> scope_AD_toIdle = new java.util.HashMap<String, Object>();
scope_AD_toIdle.put("$s0", $s0);
if (perRole.get(scope_AD_toIdle) == null){
	perRole.put(scope_AD_toIdle, new java.util.HashMap<String, Object>());
}
AD_toIdle = (edap.Transition) ((java.util.Map<String, Object>) perRole.get(scope_AD_toIdle)).get("AD_toIdle");
if ( AD_toIdle == null){
	AD_toIdle = edap.EdapFactory.eINSTANCE.createTransition();
	((java.util.Map<String, Object>) perRole.get(scope_AD_toIdle)).put("AD_toIdle",AD_toIdle);
}

if (AD_Off == null)
	AD_Off = edap.EdapFactory.eINSTANCE.createState();
if (AD_toIdle == null)
	AD_toIdle = edap.EdapFactory.eINSTANCE.createTransition();
if (AD_toOff == null)
	AD_toOff = edap.EdapFactory.eINSTANCE.createTransition();

AD_Off.setName("Off");
AD_Off.getOutgoing().add(AD_toIdle);
AD_Off.getIncoming().add(AD_toOff);
AD_toIdle.setName("Off->Idle");
AD_toIdle.setSource(AD_Off);
AD_toOff.setTarget(AD_Off);

$s0.getSubstate().add(AD_Off);
AD_toIdle.setTarget($PC_Idle);
AD_toOff.setSource($PC_anyState);
$PC_anyState.getOutgoing().add(AD_toOff);

end
