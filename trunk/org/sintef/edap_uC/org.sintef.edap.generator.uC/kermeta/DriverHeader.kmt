package edap;
require kermeta
require "edapuC_impl.kmt"
using kermeta::standard
using kermeta::utils
using edapuC
class DriverHeader{
operation generate(ucd : UCDevice, g : PSGenerator):String is do
var _res: StringBuffer init StringBuffer.new
_res.append("")
var d : Component init ucd.device
_res.append("")
_res.append(g.header.generate(d))
_res.append("\n\n#ifndef ")
_res.append(d.name.toUpperCase)
_res.append("_H_\n#define ")
_res.append(d.name.toUpperCase)
_res.append("_H_\n\n")
if ucd.init_required then
_res.append("void init_")
_res.append(d.name)
_res.append("();")
end
_res.append("\n")
if ucd.polling_required then
_res.append("void poll_")
_res.append(d.name)
_res.append("();")
end
_res.append("\n\n")
 d.receives.each{ m | 
_res.append("void ")
_res.append(d.name)
_res.append("_send_")
_res.append(m.name)
_res.append("(")
_res.append(m.getParameterList(true, g))
_res.append(");\n")
}
_res.append("\n")
 d.sends.each{ m | 
_res.append("void register_")
_res.append(d.name)
_res.append("_receive_")
_res.append(m.name)
_res.append("_listener(void(*listener)(")
_res.append(m.getParameterTypeList(true, g))
_res.append("));\n")
}
_res.append("\n#endif /* ")
_res.append(d.name.toUpperCase)
_res.append("_H_ */\n")
result := _res.toString
end
}
