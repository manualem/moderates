package edap;
require kermeta
require "edapuC_impl.kmt"
using kermeta::standard
using kermeta::utils
using edapuC
class DriverSkeleton{
operation generate(ucd : UCDevice, g : PSGenerator):String is do
var _res: StringBuffer init StringBuffer.new
_res.append("")
var d : Component init ucd.device
_res.append("")
_res.append(g.header.generate(d))
_res.append("\n\n#include \"")
_res.append(d.name)
_res.append(".h\"\n\n")
if ucd.globals_required then
_res.append(g.globals_code(ucd))
end
_res.append("\n\n")
 d.sends.each{ m | 
_res.append("void (*")
_res.append(d.name)
_res.append("_receive_")
_res.append(m.name)
_res.append("_listener)(")
_res.append(m.getParameterTypeList(true, g))
_res.append(") = 0x0;\nvoid register_")
_res.append(d.name)
_res.append("_receive_")
_res.append(m.name)
_res.append("_listener(void(*listener)(")
_res.append(m.getParameterTypeList(true, g))
_res.append(")) {\n\t")
_res.append(d.name)
_res.append("_receive_")
_res.append(m.name)
_res.append("_listener = listener;\n}\nvoid ")
_res.append(d.name)
_res.append("_receive_")
_res.append(m.name)
_res.append("(")
_res.append(m.getParameterList(true, g))
_res.append(") {\n\tif (")
_res.append(d.name)
_res.append("_receive_")
_res.append(m.name)
_res.append("_listener != 0) ")
_res.append(d.name)
_res.append("_receive_")
_res.append(m.name)
_res.append("_listener(")
_res.append(m.getParameterNameList(true))
_res.append(");\n}\n")
}
_res.append("\n")
if ucd.init_required then
_res.append("void init_")
_res.append(d.name)
_res.append("() {\n")
_res.append(g.init_code(ucd))
_res.append("\n}")
end
_res.append("\n")
if ucd.polling_required then
_res.append("void poll_")
_res.append(d.name)
_res.append("(){\n")
_res.append(g.poll_code(ucd))
_res.append("\n}")
end
_res.append("\n")
 d.receives.each{ m | 
_res.append("void ")
_res.append(d.name)
_res.append("_send_")
_res.append(m.name)
_res.append("(")
_res.append(m.getParameterList(true, g))
_res.append(") {\n")
_res.append(g.message_code(ucd,m))
_res.append("\n}\n")
}
_res.append("")
result := _res.toString
end
}
