package edapuC;
require kermeta
require "edap_USART.kmt"
using kermeta::standard
using kermeta::utils
using edap
class USART_send_transmit_hexdump inherits DeviceCodeGenerator {
method generate(d : UCDevice):String is do
var _res: StringBuffer init StringBuffer.new
_res.append("// Implemetation of void USART_send_transmit_hexdump()\n\n\t#define\tDEBUGDUMPLINELENGTH\t16\n\tuint8_t offs = 0;\n\twhile(len>0) {\n\t\tUSART_send_transmit_Hex8( offs );\n\t\tUSART_send_transmit(\": \");\n\t\tint llen = (len>DEBUGDUMPLINELENGTH) ? DEBUGDUMPLINELENGTH : len;\n\t\tconst char* lptr = ptr;\n\t\tfor( ; llen>0; --llen, ++lptr ) {\n\t\t\tUSART_send_transmit_Hex8( *lptr );\n\t\t\tUSART_send_transmit_byte( ' ' );\n\t\t}\n\t\tllen = (len<DEBUGDUMPLINELENGTH) ? DEBUGDUMPLINELENGTH-len : 0;\n\t\tfor( ; llen>0; --llen )\n\t\t\tUSART_send_transmit(\"   \");\n\t\tllen = (len>DEBUGDUMPLINELENGTH) ? DEBUGDUMPLINELENGTH : len;\n\t\tfor( ; llen>0; --llen, --len, ++ptr ) {\n\t\t\tchar c = *ptr;\n\t\t\tUSART_send_transmit_byte( (c>=' ' && c<127) ? c : '.' );\n\t\t}\n\t\tUSART_send_transmit_byte('\\n');\n\t\toffs += DEBUGDUMPLINELENGTH;\n\t}\n")
result := _res.toString
end
}
