package edapuC;

require kermeta
require "../Generator.kmt"
require "LED_send_light_on.kmt"
require "init_LED.kmt"
require "globals_LED.kmt"
require "LED_send_light_off.kmt"
require "LED_send_toggle.kmt"

using kermeta::standard
using edap

/*
To register the code generator:
require "LED/edap_LED.kmt"

templates.put("LED_send_light_on", LED_send_light_on.new)
templates.put("init_LED", init_LED.new)
templates.put("globals_LED", globals_LED.new)
templates.put("LED_send_light_off", LED_send_light_off.new)
templates.put("LED_send_toggle", LED_send_toggle.new)
*/

// Add here any accessors for specific platform annotations

class LED {
	reference ADDR : String
	reference PORT : String
	reference BIT : String
	reference LABEL : String
	
}

aspect class UCDevice {
	
	reference _leds : OrderedSet<LED>
	
	property readonly LEDs : OrderedSet<LED>
		getter is do
			if _leds == void then
				result := OrderedSet<LED>.new
				var pin : StaticProperty init properties.detect{p| p.name == "MSP_PIN"}
				if pin != void then
					var l : LED
					var i : Integer init 1
					pin.~value.split(",").each { p |
						l := LED.new
						p := p.replace(" ", "")
						l.LABEL :=  p
						//stdio.writeln("p=" + p + ";")
						l.PORT := p.substring(0,2)
						l.BIT :=  p.substring(3,4)
						l.ADDR := i.toString
						i := i + 1
						result.add(l)
					}
					_leds := result
				end
			else
					result := _leds
			end
		end
	
}

