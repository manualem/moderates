/* $Id:$ 
 * Creation : March 10, 2011
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            bmori
 */

package thingML;


require kermeta
require "./helper.kmt"
require "./template/fixedSizePackage.kmt"
require "./template/protocolPacket.kmt"
require "./template/protocol.kmt"
/*require "./template/incomingMessageSuperClass.kmt"
require "./template/outgoingMessageSuperClass.kmt"
require "./template/incomingMessage.kmt"
require "./template/outgoingMessage.kmt"*/
require "./template/message.kmt"
//require "./template/simulator/simulator.kmt"
require "./template/simulator/GUI.kmt"
require "./template/simulator/controller.kmt"
require "./template/simulator/GUI2.kmt"
require "./template/simulator/controller2.kmt"
require "./template/simulator/handler.kmt"
require "./template/simulator/test.kmt"

using kermeta::standard
using kermeta::io

using edap

class MainJavaProtocolGenerator
{

	operation mainJava(thingMLuri : String, srcFolder : String) : Void is do 
		main(thingMLuri, srcFolder, false)
	end

	operation mainKevoree(thingMLuri : String, srcFolder : String) : Void is do 
		main(thingMLuri, srcFolder, true)
	end

	operation main(thingMLuri : String, srcFolder : String, isKevoree: Boolean) : Void is do 
		var helper : Helper init Helper.new
		var thingMLmodel : EdapModel init helper.loadThingML(thingMLuri)
		
		var fspGenerator : FixedSizePackageGenerator init FixedSizePackageGenerator.new
		var ppGenerator : ProtocolPacketGenerator init ProtocolPacketGenerator.new
		var pGenerator : ProtocolGenerator init ProtocolGenerator.new 
		var mGenerator : MessageGenerator init MessageGenerator.new
		
		var guiGenerator : InteractiveDataGUIGenerator init InteractiveDataGUIGenerator.new
		var controllerGenerator : InteractiveDataControllerGenerator init InteractiveDataControllerGenerator.new
		var guiGenerator2 : InteractiveDataGUIGenerator2 init InteractiveDataGUIGenerator2.new
		var controllerGenerator2 : InteractiveDataControllerGenerator2 init InteractiveDataControllerGenerator2.new
		var handlerGenerator : ProtocolHandlerGenerator init ProtocolHandlerGenerator.new
		var simulatorTestGenerator : SimulatorTestGenerator init SimulatorTestGenerator.new
		
		var file : FileIO init FileIO.new
		
		file.writeTextFile(srcFolder+"/org/sintef/moderates/FixedSizePacket.java", fspGenerator.generate("org.sintef.moderates"))
		
		thingMLmodel.types.select{t | t.isKindOf(Device)}.each{t |
		
			stdio.writeln("ProtocolPacketGenerator")
			stdio.writeln("-----------------------")
			file.writeTextFile(srcFolder+"/org/sintef/moderates/"+t.name+"ProtocolPacket.java", ppGenerator.generate("org.sintef.moderates", t.asType(Device), thingMLmodel))
			stdio.writeln("")
			
			
			stdio.writeln("ProtocolGenerator")
			stdio.writeln("-----------------------")
			file.writeTextFile(srcFolder+"/org/sintef/moderates/"+t.name+"Protocol.java", pGenerator.generate("org.sintef.moderates", t.asType(Device), thingMLmodel))
			stdio.writeln("")
	
			/*stdio.writeln("IncomingMessageSuperGenerator")
			stdio.writeln("-----------------------")
			file.writeTextFile(srcFolder+"/org/sintef/moderates/in/Incoming"+t.name+"Message.java", imsGenerator.generate("org.sintef.moderates", t.asType(Device), thingMLmodel))
			stdio.writeln("")
			
			
			stdio.writeln("OutgoingMessageSuperGenerator")
			stdio.writeln("-----------------------")
			file.writeTextFile(srcFolder+"/org/sintef/moderates/out/Outgoing"+t.name+"Message.java", omsGenerator.generate("org.sintef.moderates", t.asType(Device), thingMLmodel))
			stdio.writeln("")*/		
			
			t.asType(Device).sends.each{ m |
				stdio.writeln("IncomingMessageGenerator")
				stdio.writeln("-----------------------")
				file.writeTextFile(srcFolder+"/org/sintef/moderates/msg/"+m.name+".java", mGenerator.generate("org.sintef.moderates", m, t.asType(Device)))
				//file.writeTextFile(srcFolder+"/org/sintef/moderates/out/"+m.name+"_Out.java", mGenerator.generate("org.sintef.moderates", m, t.name))
				stdio.writeln("")
			}
			
			t.asType(Device).receives.each{ m |
				stdio.writeln("OutgoingMessageGenerator")
				stdio.writeln("-----------------------")
				file.writeTextFile(srcFolder+"/org/sintef/moderates/msg/"+m.name+".java", mGenerator.generate("org.sintef.moderates", m, t.asType(Device)))
				//file.writeTextFile(srcFolder+"/org/sintef/moderates/out/"+m.name+"_Out.java", omGenerator.generate("org.sintef.moderates", m, t.name))
				stdio.writeln("")
			}
			
			stdio.writeln("ProtocolHandlerGenerator")
			stdio.writeln("-----------------------")
			file.writeTextFile(srcFolder+"/org/sintef/moderates/sim/ProtocolHandler.java", handlerGenerator.generate("org.sintef.moderates"))
			stdio.writeln("")
			
			stdio.writeln("InteractiveDataGUIGenerator")
			stdio.writeln("-----------------------")
			file.writeTextFile(srcFolder+"/org/sintef/moderates/sim/Interactive"+t.name+"DataGUI.java", guiGenerator.generate("org.sintef.moderates", t.asType(Device)))
			stdio.writeln("")
			
			stdio.writeln("InteractiveDataControllerGenerator")
			stdio.writeln("-----------------------")
			file.writeTextFile(srcFolder+"/org/sintef/moderates/sim/Interactive"+t.name+"DataController.java", controllerGenerator.generate("org.sintef.moderates", t.asType(Device), isKevoree))
			stdio.writeln("")
			
			stdio.writeln("InteractiveDataGUIGenerator2")
			stdio.writeln("-----------------------")
			file.writeTextFile(srcFolder+"/org/sintef/moderates/sim/Interactive"+t.name+"DataGUI2.java", guiGenerator2.generate("org.sintef.moderates", t.asType(Device)))
			stdio.writeln("")
			
			stdio.writeln("InteractiveDataControllerGenerator2")
			stdio.writeln("-----------------------")
			file.writeTextFile(srcFolder+"/org/sintef/moderates/sim/Interactive"+t.name+"DataController2.java", controllerGenerator2.generate("org.sintef.moderates", t.asType(Device), isKevoree))
			stdio.writeln("")
			
			stdio.writeln("SimulatorTestGenerator")
			stdio.writeln("-----------------------")
			file.writeTextFile(srcFolder+"/org/sintef/moderates/sim/Test"+t.name+".java", simulatorTestGenerator.generate("org.sintef.moderates", t.asType(Device)))
			stdio.writeln("")		
		}
	end
}