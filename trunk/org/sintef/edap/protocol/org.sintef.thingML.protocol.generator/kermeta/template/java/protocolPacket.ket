<%@ket
package="thingML"
require="platform:/lookup/org.sintef.edap.model/model/edap.ecore ../stringHelper.kmt"
using=""
isAspectClass="false"
class="ProtocolPacketGenerator"
ismethod="false"operation="generate"
parameters="packageName:String, device:edap::Device, root:edap::EdapModel"
%>
<%var helper : StringHelper init StringHelper.new%>
package <%=packageName%>;

import java.nio.ByteBuffer;

public abstract class <%=device.name%>ProtocolPacket extends FixedSizePacket {
	
	private int position = 5;
	
	public <%=device.name%>ProtocolPacket() {
		super();
	}
	
	protected void setCommandID(byte cmd) {
		data[4] = cmd;
	}
	
	protected byte getCommandID(){
		return data[4];
	}
	
	<%root.types.select{t | t.isKindOf(edap::PrimitiveType)}.each{ t | %>
	protected void set<%=helper.firstToUpper(helper.toJavaType(t))%>Value(<%=helper.firstToUpper(helper.toJavaType(t))%> v) {
		<%if helper.getJavaByteTypes.contains(t.name) then%>
		int positionModifier = (int) (<%=helper.firstToUpper(helper.toJavaType(t))%>.SIZE/8);
		ByteBuffer bb = ByteBuffer.wrap(data, position, positionModifier);
			<%if helper.isJavaByte(t) then%>
		bb.put(v);
			<%else%>
		bb.put<%=helper.firstToUpper(helper.toJavaType(t))%>(v);
			<%end%>		
		<%else%>
			<%if helper.isJavaString(t) then%>
		int positionModifier = <%=helper.getSize(t)%>;
		if (v.length() > <%=helper.getSize(t)%>) v = v.substring(0, <%=helper.getSize(t)%>-1);
		ByteBuffer bb = ByteBuffer.wrap(data, position, positionModifier);
		bb.put(v.getBytes());
			<%end%>
		<%end%>	
		position += positionModifier;
	}
	
	<%}%>
}