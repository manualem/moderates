package thingML;
require kermeta
require "platform:/lookup/org.sintef.edap.model/model/edap.ecore"
require "../../stringHelper.kmt"
using kermeta::standard
using kermeta::utils
class InteractiveDataGUIGenerator{
operation generate(packageName:String, device:edap::Device):String is do
var _res: StringBuffer init StringBuffer.new
_res.append("")
var helper : StringHelper init StringHelper.new
_res.append("package ")
_res.append(packageName)
_res.append(";\n\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.event.ActionListener;\n\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JTextField;\n\npublic class Interactive")
_res.append(device.name)
_res.append("DataGUI {\n\t\n\tprivate static JFrame frame;\n\t\n")
device.sends.each{msg |
_res.append("\t//Attributes related to ")
_res.append(msg.name)
_res.append("\n\tpublic static JButton sendButton")
_res.append(msg.name)
_res.append(";\n")
msg.parameters.each{ p | 
_res.append("\tpublic static JTextField field")
_res.append(msg.name+"_"+p.name)
_res.append(";\n")
}
_res.append("\t\t\n")
}
_res.append("\t\t\n\tpublic static void addListener(ActionListener l){\n")
device.sends.each{msg |
_res.append("\t\tsendButton")
_res.append(msg.name)
_res.append(".addActionListener(l);\n")
}
_res.append("\t}\n\n\tpublic static void init(){\n\t\tframe = new JFrame(\"Interactive ")
_res.append(device.name)
_res.append(" Data Simulator\");\n\t\tframe.setLayout(new GridBagLayout());\n\t\t\n\t\tGridBagConstraints c = new GridBagConstraints();\n\t\tc.gridwidth = 1;\n\t\tc.fill = GridBagConstraints.HORIZONTAL;\n\t\tc.insets = new Insets(0,3,0,3);\n\t\t\n")
var x : Integer init 0
_res.append("")
device.sends.each{msg |
_res.append("\t\t//GUI related to ")
_res.append(msg.name)
_res.append("\n\t\tc.gridy = 0;\n \t\tc.gridx = ")
_res.append(x.toString)
_res.append(";\n\t\tframe.add(create")
_res.append(msg.name)
_res.append("Label(), c);\n\t\t\n\t\tc.gridy = 1;\n \t\tc.gridx = ")
_res.append(x.toString)
_res.append(";\n\t\tframe.add(create")
_res.append(msg.name)
_res.append("Panel(), c);\n\t\t\n\t\tc.gridy = 2;\n \t\tc.gridx = ")
_res.append(x.toString)
_res.append(";\n\t\tframe.add(createSend")
_res.append(msg.name)
_res.append("Button(), c);\n\t\t\n")
x := x+1
_res.append("")
}
_res.append("\t\t\t\t\t\n\t\t\n\t\tframe.pack();\n\t\tframe.setVisible(true);\n\t}\n\t\n")
device.sends.each{ msg |
_res.append("\tpublic static JLabel create")
_res.append(msg.name)
_res.append("Label(){\n\t\treturn new JLabel(\"")
_res.append(msg.name)
_res.append("\");\n\t}\n\t\n\tpublic static JButton createSend")
_res.append(msg.name)
_res.append("Button(){\n\t\tsendButton")
_res.append(msg.name)
_res.append(" = new JButton(\"send\");\n\t\treturn sendButton")
_res.append(msg.name)
_res.append(";\n\t}\n\t\n")
var y : Integer init 0
_res.append("\tpublic static JPanel create")
_res.append(msg.name)
_res.append("Panel(){\n\n\t\tGridBagConstraints c = new GridBagConstraints();\n\t\tc.fill = GridBagConstraints.HORIZONTAL;\n\t\tc.weightx = 0.5;\n\t\t\n\t\tJPanel panel = new JPanel(new GridBagLayout());\n\n")
msg.parameters.each{ p | 
_res.append("\t\tJLabel label")
_res.append(p.name)
_res.append(" = new JLabel();\n\t\tlabel")
_res.append(p.name)
_res.append(".setText(\"")
_res.append(p.name)
_res.append("\");\n \t\tc.gridx = 0;\n\t\tc.gridy = ")
_res.append(y.toString)
_res.append(";\n \t\tpanel.add(label")
_res.append(p.name)
_res.append(", c);\n \t\t\n \t\tfield")
_res.append(msg.name+"_"+p.name)
_res.append(" = new JTextField();\n\t\tfield")
_res.append(msg.name+"_"+p.name)
_res.append(".setText(\"")
_res.append(p.name)
_res.append("\");\n \t\tc.gridx = 1;\n\t\tc.gridy = ")
_res.append(y.toString)
_res.append(";\n \t\tpanel.add(field")
_res.append(msg.name+"_"+p.name)
_res.append(", c);\n \t\t\n\n")
y := y+1
_res.append("")
}
_res.append("\t\t\t\n\t\treturn panel;\t\n\t}\n\t\n")
}
_res.append("}")
result := _res.toString
end
}
