package thingML;
require kermeta
require "platform:/lookup/org.sintef.edap.model/model/edap.ecore"
require "../../stringHelper.kmt"
require "../../CHelper.kmt"
using kermeta::standard
using kermeta::utils
using edap
class ArduinoXBeeExampleGenerator{
operation generate(packageName:String, device:edap::Device):String is do
var _res: StringBuffer init StringBuffer.new
_res.append("")
var helper : StringHelper init StringHelper.new
_res.append("")
var chelper : CHelper init CHelper.new.make
_res.append("#include <")
_res.append(device.name)
_res.append("XBeeAPI.h>\n#include <XBee.h>\n\n// Replace the address by the actual address of the target XBee gateway\n")
_res.append(device.name)
_res.append("XBeeAPI _")
_res.append(device.name)
_res.append("XBeeAPI = ")
_res.append(device.name)
_res.append("XBeeAPI(0x0013a200, 0x40331dc5);\n\n")
device.receives.each{out | 
_res.append("void receive")
_res.append(out.name)
_res.append("(")
_res.append(chelper.msgParamsDecl(out))
_res.append(") {\n\t// TODO: Implement the handler for message reception of the message ")
_res.append(out.name)
_res.append("\n}\n")
}
_res.append("\nvoid setup()\n{\n\t// initialize the ")
_res.append(device.name)
_res.append("XBeeAPI protocol\n\t_")
_res.append(device.name)
_res.append("XBeeAPI.init_")
_res.append(device.name)
_res.append("XBeeAPI();\n\t\n\t// TODO: Add your own setup code here\n}\n\nvoid loop()\n{\n\t// check for incomming messages for the ")
_res.append(device.name)
_res.append("XBeeAPI protocol\n\t_")
_res.append(device.name)
_res.append("XBeeAPI.poll_")
_res.append(device.name)
_res.append("XBeeAPI();\n\t\n\t// TODO: Add any additional loop code here.\n}\n")
result := _res.toString
end
}
