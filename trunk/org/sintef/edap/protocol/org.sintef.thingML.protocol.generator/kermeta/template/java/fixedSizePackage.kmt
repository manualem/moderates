package thingML;
require kermeta
require "../../stringHelper.kmt"
using kermeta::standard
using kermeta::utils
class FixedSizePackageGenerator{
operation generate(packageName:String):String is do
var _res: StringBuffer init StringBuffer.new
_res.append("")
var helper : StringHelper init StringHelper.new
_res.append("package ")
_res.append(packageName)
_res.append(";\n\npublic abstract class FixedSizePacket {\n\n\tprotected byte[] data;\n\t\n\tpublic byte[] getPacket() {\n\t\treturn data;\n\t}\n\t\n\tpublic String toString() {\n\t\tString result = \"\";\n\t\tfor (int i = 0; i< 16; i++) {\n\t\t\tresult += Byte.toString(data[i]) + ' ';\n\t\t}\n\t\treturn result;\n\t}\n\t\n\tpublic static String toString(byte msg[]) {\n\t\tString result = \"\";\n\t\tfor (int i = 0; i< msg.length; i++) {\n\t\t\tresult += Byte.toString(msg[i]) + ' ';\n\t\t}\n\t\treturn result;\n\t}\n\t\n\tpublic FixedSizePacket() {\n\t\tdata = new byte[16];\n\t}\n\t\n\tpublic void setPacketData(byte[] packet) {\n\t\tthis.data = packet;\n\t}\n\t\n\tpublic void setSourceAddress(byte address) {\n\t\tdata[0] = address;\n\t}\n\tpublic byte getSourceAddress() {\n\t\treturn data[0];\n\t}\n\t\n\tpublic void setTargetAddress(byte address) {\n\t\tdata[1] = address;\n\t}\n\tpublic byte getTargetAddress() {\n\t\treturn data[1];\n\t}\n\t\n\tpublic void setFrameNumber(byte frame) {\n\t\tdata[2] = frame;\n\t}\n\tpublic byte getFrameNumber() {\n\t\treturn data[2];\n\t}\n\t\n\tpublic void setLength(byte length) {\n\t\tif (length > 10) length = 10;\n\t\tdata[3] = length;\n\t}\n\tpublic byte getLength() {\n\t\treturn data[3];\n\t}\n\t\n\tpublic byte[] getRawData() {\n\t\tbyte[] result = new byte[getLength()];\n\t\tfor(int i=0; i<getLength();i++) {\n\t\t\tresult[i] = data[i+4];\n\t\t}\n\t\treturn result;\n\t}\n\t\n\tpublic void setRawData(byte[] ndata) {\n\t\tint i = 0;\n\t\twhile (i < ndata.length && i < 10) {\n\t\t\tdata[i+4] = ndata[i];\n\t\t\ti++;\n\t\t}\n\t\tsetLength((byte)i);\n\t}\n\t\n}\n")
result := _res.toString
end
}
