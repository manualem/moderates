package thingML;
require kermeta
require "platform:/lookup/org.sintef.edap.model/model/edap.ecore"
require "../../stringHelper.kmt"
require "../../CHelper.kmt"
using kermeta::standard
using kermeta::utils
using edap
class ArduinoXBeeHeaderGenerator{
operation generate(packageName:String, device:edap::Device):String is do
var _res: StringBuffer init StringBuffer.new
_res.append("")
var helper : StringHelper init StringHelper.new
_res.append("")
var chelper : CHelper init CHelper.new.make
_res.append("/**\n * Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, Version 3, 29 June 2007;\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.gnu.org/licenses/lgpl-3.0.txt\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * Authors: Franck Fleurey and Brice Morin\n * Company: SINTEF IKT, Oslo, Norway\n * Date: 2011\n */\n \n// ensure this library description is only included once\n#ifndef ")
_res.append(device.name)
_res.append("XBeeAPI_h\n#define ")
_res.append(device.name)
_res.append("XBeeAPI_h\n\n// include types & constants of Wiring core API\n#include \"WConstants.h\"\n#undef abs\n#undef round\n\n#include <inttypes.h>\n\n// include the Xbee lib\n#include \"../XBee/XBee.h\"\n\n")
device.all_enums.each{ e | e.literals.each { l |
_res.append("#define ")
_res.append(e.name)
_res.append("_")
_res.append(l.name)
_res.append(" ")
_res.append(l.c_value)
_res.append("\n")
}}
_res.append("\n// Operations which implements the logic to execute when messages are received.\n")
device.receives.each{out | 
_res.append("extern void receive")
_res.append(out.name)
_res.append("(")
_res.append(chelper.msgParamsDecl(out))
_res.append(");\n")
}
_res.append("\nclass ")
_res.append(device.name)
_res.append("XBeeAPI\n{\n  public:\n\t// Constructor which takes the address of the target XBee as parameter\n    ")
_res.append(device.name)
_res.append("XBeeAPI(uint32_t, uint32_t);\n\t// Standard init and pool operations to be called in setup and loop\n\tvoid init_")
_res.append(device.name)
_res.append("XBeeAPI();\n\tvoid poll_")
_res.append(device.name)
_res.append("XBeeAPI();\n\t// Operations for sending all messages\n")
device.sends.each{in | 
_res.append("    void send")
_res.append(in.name)
_res.append("(")
_res.append(chelper.msgParamsDecl(in))
_res.append(");\n")
}
_res.append("\n  private:\n\t// the address of the target XBee\n\tXBee xbee;\n\tXBeeAddress64 addr64;\n\tZBTxRequest zbTx;\n\tZBTxStatusResponse txStatus;\n\tZBRxResponse rx;\n\tuint8_t payload[16];\n\t// private operation which parses incomming message and calls\n\t// the corresponding exten functions\n    void parseIncommingMessage(uint8_t data[]);\n};\n\n#endif\n")
result := _res.toString
end
}
