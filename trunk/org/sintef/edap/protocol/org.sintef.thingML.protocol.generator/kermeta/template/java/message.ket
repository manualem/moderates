<%@ket
package="thingML"
require="../../stringHelper.kmt"
using=""
isAspectClass="false"
class="MessageGenerator"
ismethod="false"operation="generate"
parameters="packageName:String, msg:edap::Message, device:edap::Device"
%>
<%var helper : StringHelper init StringHelper.new%>
/**
 * Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, Version 3, 29 June 2007;
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 	http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Authors: Franck Fleurey and Brice Morin
 * Company: SINTEF IKT, Oslo, Norway
 * Date: 2011
 */
package <%=packageName%>.msg;

import <%=packageName%>.*;

public class <%=msg.name%> extends <%=device.name%>ProtocolPacket {

	<%msg.parameters.each{ p | %>
	private <%=helper.toJavaType(p.type)%> <%=p.name%>;
	<%}%>
	
	public <%=msg.name%>(<%=helper.paramsToJava(msg)%>) {
		setCommandID(<%=device.name%>Protocol.<%=helper.toJavaConstant(msg.name)%>);
		<%msg.parameters.each{ p | %>
		set<%=helper.firstToUpper(helper.java_type_annotation(p.type))%>Value(<%=p.name%><%if p.type.isKindOf(edap::Enumeration) then%>.getValue()<%end%>);
		this.<%=p.name%> = <%=p.name%>;
		<%}%>
	}
	
	public <%=msg.name%>(byte[] packet) {
		setPacketData(packet);
		<%msg.parameters.each{ p | %>
			<%if helper.isJavaString(p.type) then%>
		 <%=p.name%> = ""; 
		for(int i=0; i<Math.min(<%=helper.getSize(p.type)%>, getLength()); i++) {
			 <%=p.name%> +=  buffer.getChar();
		}
			<%else%>
				<%if p.type.isKindOf(edap::Enumeration) then%>
					<% if helper.firstToUpper(helper.enumToJavaType(p.type.asType(edap::Enumeration))) != "Byte" then%>
		<%=p.name%> = <%=helper.toJavaType(p.type)%>.fromValue(buffer.get<%=helper.firstToUpper(helper.toJavaType(p.type))%>());
					<%else%>
		<%=p.name%> = <%=helper.toJavaType(p.type)%>.fromValue(buffer.get());		
					<%end%>
				<%else%>
					<% if helper.firstToUpper(helper.toJavaType(p.type)) != "Byte" then%>
		<%=p.name%> = buffer.get<%=helper.firstToUpper(helper.toJavaType(p.type))%>();
					<%else%>
		<%=p.name%> = buffer.get();
					<%end%>
				<%end%>
			<%end%>
		<%}%>
		
	}
	
	@Override
	public void acceptHandler(<%=device.name%>MessageHandler v) {
		v.handle<%=msg.name%>(this);
	}

	@Override
	public String toString(){
		String myString = "<%=msg.name%>:";
		<%msg.parameters.each{ p | %>
		myString += " [<%=p.name%>: "+<%=p.name%>+"]";
		<%}%>
		return myString;
	}

	<%msg.parameters.each{ p | %>
	public <%=helper.toJavaType(p.type)%> get<%=helper.firstToUpper(p.name)%>() {
		return <%=p.name%>;
	}
	
	<%}%>	
}