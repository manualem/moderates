package thingML;
require kermeta
require "../../stringHelper.kmt"
using kermeta::standard
using kermeta::utils
class MessageGenerator{
operation generate(packageName:String, msg:edap::Message, device:edap::Device):String is do
var _res: StringBuffer init StringBuffer.new
_res.append("")
var helper : StringHelper init StringHelper.new
_res.append("/**\n * Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, Version 3, 29 June 2007;\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.gnu.org/licenses/lgpl-3.0.txt\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * Authors: Franck Fleurey and Brice Morin\n * Company: SINTEF IKT, Oslo, Norway\n * Date: 2011\n */\npackage ")
_res.append(packageName)
_res.append(".msg;\n\nimport ")
_res.append(packageName)
_res.append(".*;\n\npublic class ")
_res.append(helper.firstToUpper(msg.name))
_res.append(" extends ")
_res.append(device.name)
_res.append("ProtocolPacket {\n\n")
msg.parameters.each{ p | 
_res.append("\tprivate ")
_res.append(helper.toJavaType(p.type))
_res.append(" ")
_res.append(p.name)
_res.append(";\n")
}
_res.append("\t\n\tpublic ")
_res.append(helper.firstToUpper(msg.name))
_res.append("(")
_res.append(helper.paramsToJava(msg))
_res.append(") {\n\t\tsetCommandID(")
_res.append(device.name)
_res.append("Protocol.")
_res.append(helper.toJavaConstant(msg.name))
_res.append(");\n")
msg.parameters.each{ p | 
_res.append("\t\tset")
_res.append(helper.firstToUpper(helper.java_type_annotation(p.type)))
_res.append("Value(")
_res.append(p.name)
if p.type.isKindOf(edap::Enumeration) then
_res.append(".getValue()")
end
_res.append(");\n\t\tthis.")
_res.append(p.name)
_res.append(" = ")
_res.append(p.name)
_res.append(";\n")
}
_res.append("\t}\n\t\n\tpublic ")
_res.append(helper.firstToUpper(msg.name))
_res.append("(byte[] packet) {\n\t\tsetPacketData(packet);\n")
msg.parameters.each{ p | 
_res.append("")
if helper.isJavaString(p.type) then
_res.append("\t\t ")
_res.append(p.name)
_res.append(" = \"\"; \n\t\tfor(int i=0; i<Math.min(")
_res.append(helper.getSize(p.type))
_res.append(", getLength()); i++) {\n\t\t\t ")
_res.append(p.name)
_res.append(" +=  buffer.getChar();\n\t\t}\n")
else
_res.append("")
if p.type.isKindOf(edap::Enumeration) then
_res.append("")
 if helper.firstToUpper(helper.enumToJavaType(p.type.asType(edap::Enumeration))) != "Byte" then
_res.append("\t\t")
_res.append(p.name)
_res.append(" = ")
_res.append(helper.toJavaType(p.type))
_res.append(".fromValue(buffer.get")
_res.append(helper.firstToUpper(helper.toJavaType(p.type)))
_res.append("());\n")
else
_res.append("\t\t")
_res.append(p.name)
_res.append(" = ")
_res.append(helper.toJavaType(p.type))
_res.append(".fromValue(buffer.get());\t\t\n")
end
_res.append("")
else
_res.append("")
 if helper.firstToUpper(helper.toJavaType(p.type)) != "Byte" then
_res.append("\t\t")
_res.append(p.name)
_res.append(" = buffer.get")
_res.append(helper.firstToUpper(helper.toJavaType(p.type)))
_res.append("();\n")
else
_res.append("\t\t")
_res.append(p.name)
_res.append(" = buffer.get();\n")
end
_res.append("")
end
_res.append("")
end
_res.append("")
}
_res.append("\t\t\n\t}\n\t\n\t@Override\n\tpublic void acceptHandler(")
_res.append(device.name)
_res.append("MessageHandler v) {\n\t\tv.handle")
_res.append(helper.firstToUpper(msg.name))
_res.append("(this);\n\t}\n\n\t@Override\n\tpublic String toString(){\n\t\tString myString = \"")
_res.append(msg.name)
_res.append(":\";\n")
msg.parameters.each{ p | 
_res.append("\t\tmyString += \" [")
_res.append(p.name)
_res.append(": \"+")
_res.append(p.name)
_res.append("+\"]\";\n")
}
_res.append("\t\treturn myString;\n\t}\n\n")
msg.parameters.each{ p | 
_res.append("\tpublic ")
_res.append(helper.toJavaType(p.type))
_res.append(" get")
_res.append(helper.firstToUpper(p.name))
_res.append("() {\n\t\treturn ")
_res.append(p.name)
_res.append(";\n\t}\n\t\n")
}
_res.append("}")
result := _res.toString
end
}
