package thingML;
require kermeta
require "platform:/lookup/org.sintef.edap.model/model/edap.ecore"
require "../stringHelper.kmt"
using kermeta::standard
using kermeta::utils
class MessageGenerator{
operation generate(packageName:String, msg:edap::Message, device:edap::Device):String is do
var _res: StringBuffer init StringBuffer.new
_res.append("")
var helper : StringHelper init StringHelper.new
_res.append("package ")
_res.append(packageName)
_res.append(".msg;\n\nimport ")
_res.append(packageName)
_res.append(".*;\n\nimport java.nio.ByteBuffer;\n\npublic class ")
_res.append(msg.name)
_res.append(" extends ")
_res.append(device.name)
_res.append("ProtocolPacket {\n\n")
msg.parameters.each{ p | 
_res.append("\tprivate ")
_res.append(helper.toJavaType(p.type))
_res.append(" ")
_res.append(p.name)
_res.append(";\n")
}
_res.append("\t\n\tpublic ")
_res.append(msg.name)
_res.append("(")
_res.append(helper.paramsToJava(msg))
_res.append(") {\n\t\tsetCommandID(")
_res.append(device.name)
_res.append("Protocol.")
_res.append(helper.toJavaConstant(msg.name))
_res.append(");\n")
msg.parameters.each{ p | 
_res.append("\t\tset")
_res.append(helper.firstToUpper(helper.toJavaType(p.type)))
_res.append("Value(")
_res.append(p.name)
_res.append(");\n\t\tthis.")
_res.append(p.name)
_res.append(" = ")
_res.append(p.name)
_res.append(";\n")
}
_res.append("\t}\n\t\n\tpublic ")
_res.append(msg.name)
_res.append("(byte[] packet) {\n\t\tsetPacketData(packet);\n\t\tint position = 5;\n")
if msg.parameters.exists{p | not helper.isJavaString(p.type)} then
_res.append("\t\tByteBuffer bb = ByteBuffer.wrap(data, 5, 10);")
//5 and 10 are magic numbers...
_res.append("\n")
end
_res.append("")
msg.parameters.each{ p | 
_res.append("")
if helper.isJavaString(p.type) then
_res.append("\t\t ")
_res.append(p.name)
_res.append(" = \"\"; \n\t\tfor(int i=position; i<Math.min(position+")
_res.append(helper.getSize(p.type))
_res.append(", getLength()); i++) {\n\t\t\t ")
_res.append(p.name)
_res.append(" =  ")
_res.append(p.name)
_res.append(" + (char)data[i];\n\t\t}\n\t\tposition += ")
_res.append(helper.getSize(p.type))
_res.append(";\n")
else
_res.append("")
 if helper.firstToUpper(helper.toJavaType(p.type)) != "Byte" then
_res.append("\t\t")
_res.append(p.name)
_res.append(" = bb.get")
_res.append(helper.firstToUpper(helper.toJavaType(p.type)))
_res.append("();\n")
else
_res.append("\t\t")
_res.append(p.name)
_res.append(" = bb.get();\n")
end
_res.append("\t\tposition += (int) (")
_res.append(helper.firstToUpper(helper.toJavaType(p.type)))
_res.append(".SIZE/8);\n")
end
_res.append("")
}
_res.append("\t\t\n\t}\n\n\t@Override\n\tpublic String toString(){\n\t\tString myString = \"")
_res.append(msg.name)
_res.append(":\";\n")
msg.parameters.each{ p | 
_res.append("\t\tmyString += \" [")
_res.append(p.name)
_res.append(": \"+")
_res.append(p.name)
_res.append("+\"]\";\n")
}
_res.append("\t\treturn myString;\n\t}\n\n")
msg.parameters.each{ p | 
_res.append("\tpublic ")
_res.append(helper.toJavaType(p.type))
_res.append(" get")
_res.append(helper.firstToUpper(p.name))
_res.append("() {\n\t\treturn ")
_res.append(p.name)
_res.append(";\n\t}\n\t\n")
}
_res.append("}")
result := _res.toString
end
}
